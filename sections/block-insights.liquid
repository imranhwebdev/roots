<div class="block-insights py-10 md:py-16 lg:py-20 xl:py-25 bg-[#F0ECDC]">
  <div class="container">
    <div class="mb-5 md:mb-6 lg:mb-9 xl:mb-12.5 flex flex-col md:flex-row flex-wrap md:flex-nowrap md:items-center md:justify-between gap-5">
      <h2 class="text-2xl md:text-3xl lg:text-4xl xl:text-[44px] text-start flex-[0_0_auto] text-green !leading-[1.25] font-bold font-armany-bold">
        {{ section.settings.heading }}
      </h2>

      <!-- Tabs Header -->
      <div class="overflow-auto">
        <div class="flex items-center gap-3 lg:gap-4 w-78 md:w-130 lg:w-auto">
          <!-- All tab -->
          <button
            class="tab-btn active-tab text-white bg-[#1E6C44] cursor-pointer ease-in-out duration-300 text-lg lg:text-xl font-medium !leading-[1.2] font-poppins py-3.5 lg:py-4.5 px-7 lg:px-8 rounded-3xl lg:rounded-[40px]"
            data-tab="all"
          >
            All
          </button>

          <!-- Generate unique tags -->
          {% assign all_tags = '' | split: ',' %}
          {% for article in blogs[section.settings.blog].articles %}
            {% for tag in article.tags %}
              {% unless all_tags contains tag %}
                {% assign all_tags = all_tags | push: tag %}
              {% endunless %}
            {% endfor %}
          {% endfor %}

          <!-- Sort tags based on setting -->
          {% if section.settings.tag_sort == 'desc' %}
            {% assign sorted_tags = all_tags | reverse %}
          {% else %}
            {% assign sorted_tags = all_tags | sort %}
          {% endif %}

          <!-- Render tag buttons -->
          {% for tag in sorted_tags %}
            <button
              class="tab-btn text-[#1E6C44] bg-white cursor-pointer ease-in-out duration-300 text-lg lg:text-xl font-medium !leading-[1.2] font-poppins py-3.5 lg:py-4.5 px-7 lg:px-8 rounded-3xl lg:rounded-[40px]"
              data-tab="{{ tag | handle }}"
            >
              {{ tag }}
            </button>
          {% endfor %}
        </div>
      </div>
    </div>

    <!-- Posts per page and pagination controls -->
    {% assign posts_per_page = section.settings.posts_per_page | default: 9 %}

    <!-- Tabs Content -->
    <div class="tabs-wrapper">
      <!-- All Articles -->
      <div class="tab-content block" data-tab="all">
        <div
          class="articles-grid grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-5 lg:gap-7 xl:gap-8"
          data-posts-per-page="{{ posts_per_page }}"
        >
          {% for article in blogs[section.settings.blog].articles %}
            <div
              class="article-item px-3 pt-3 pb-6 bg-white rounded-lg lg:rounded-[10px]"
              data-index="{{ forloop.index0 }}"
            >
              {% if article.image %}
                <div class="w-full h-53 md:h-60 lg:h-64 mb-4 md:mb-5 lg:mb-6">
                  {{
                    article.image
                    | image_url: width: 500
                    | image_tag: class: 'size-full rounded-[10px] object-cover object-top'
                  }}
                </div>
              {% endif %}
              <div class="px-3">
                <div class="flex items-center gap-4 lg:gap-5 mb-2.5 lg:mb-3">
                  {% if article.tags.size > 0 %}
                    <span class="text-sm !leading-[1.2] tracking-[1.64px] uppercase font-poppins text-[#514849] rounded-2xl lg:rounded-[20px] py-2.5 px-4 block bg-[#F0F0F0] border border-[#F0F0F0] max-w-max">
                      {{ article.tags.first }}
                    </span>
                  {% endif %}
                  {% assign words = article.content | strip_html | split: ' ' | size %}
                  {% assign minutes = words | divided_by: 150 %}
                  {% if minutes < 1 %}
                    {% assign minutes = 1 %}
                  {% endif %}
                  <p class="text-[#103C25] text-sm !leading-[1.2] tracking-[1.64px] uppercase font-poppins">
                    {{ minutes }} min read
                  </p>
                </div>
                <h6 class="text-[#0D2E1D] text-xl lg:text-xl font-medium !leading-[1.6] mb-4 lg:mb-5">
                  <a href="{{ article.url }}">{{ article.title }}</a>
                </h6>
                <p class="text-[#514849] text-base lg:text-lg !leading-[1.6] mb-3 lg:mb-4">
                  {{ article.excerpt | strip_html | truncate: 100 }}
                </p>
                <a
                  href="{{ article.url }}"
                  class="text-[#967901] group text-lg lg:text-xl font-medium hover:text-green !leading-[1.2] font-poppins flex items-center gap-2 lg:gap-3"
                >
                  Learn More
                  <span class="group-hover:translate-x-1 transform ease-in-out duration-300">
                    <svg width="17" height="13" viewBox="0 0 17 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M10.332 1L15.832 6.5M15.832 6.5L10.332 12M15.832 6.5L1.16536 6.5" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  </span>
                </a>
              </div>
            </div>
          {% endfor %}
        </div>

        <!-- Pagination for All tab -->
        <div class="pagination-wrapper mt-8 flex justify-center" data-tab="all">
          <!-- Pagination will be generated by JavaScript -->
        </div>
      </div>

      <!-- Articles by tag -->
      {% for tag in sorted_tags %}
        <div class="tab-content hidden" data-tab="{{ tag | handle }}">
          <div
            class="articles-grid grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-5 lg:gap-7 xl:gap-8"
            data-posts-per-page="{{ posts_per_page }}"
          >
            {% assign tag_article_count = 0 %}
            {% for article in blogs[section.settings.blog].articles %}
              {% if article.tags contains tag %}
                {% assign tag_article_count = tag_article_count | plus: 1 %}
                <div
                  class="article-item px-3 pt-3 pb-6 bg-white rounded-lg lg:rounded-[10px]"
                  data-index="{{ tag_article_count | minus: 1 }}"
                >
                  {% if article.image %}
                    <div class="w-full h-53 md:h-60 lg:h-64 mb-4 md:mb-5 lg:mb-6">
                      {{
                        article.image
                        | image_url: width: 500
                        | image_tag: class: 'size-full rounded-[10px] object-cover object-top'
                      }}
                    </div>
                  {% endif %}
                  <div class="px-3">
                    <div class="flex items-center gap-4 lg:gap-5 mb-2.5 lg:mb-3">
                      <span class="text-sm !leading-[1.2] tracking-[1.64px] uppercase font-poppins text-[#514849] rounded-2xl lg:rounded-[20px] py-2.5 px-4 block bg-[#F0F0F0] border border-[#F0F0F0] max-w-max">
                        {{ tag }}
                      </span>
                      {% assign words = article.content | strip_html | split: ' ' | size %}
                      {% assign minutes = words | divided_by: 150 %}
                      {% if minutes < 1 %}
                        {% assign minutes = 1 %}
                      {% endif %}
                      <p class="text-[#103C25] text-sm !leading-[1.2] tracking-[1.64px] uppercase font-poppins">
                        {{ minutes }} min read
                      </p>
                    </div>
                    <h6 class="text-[#0D2E1D] text-xl lg:text-xl font-medium !leading-[1.6] mb-4 lg:mb-5">
                      <a href="{{ article.url }}">{{ article.title }}</a>
                    </h6>
                    <p class="text-[#514849] text-base lg:text-lg !leading-[1.6] mb-3 lg:mb-4">
                      {{ article.excerpt | strip_html | truncate: 100 }}
                    </p>
                    <a
                      href="{{ article.url }}"
                      class="text-[#967901] group text-lg lg:text-xl font-medium hover:text-green !leading-[1.2] font-poppins flex items-center gap-2 lg:gap-3"
                    >
                      Learn More
                      <span class="group-hover:translate-x-1 transform ease-in-out duration-300">
                        <svg width="17" height="13" viewBox="0 0 17 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M10.332 1L15.832 6.5M15.832 6.5L10.332 12M15.832 6.5L1.16536 6.5" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      </span>
                    </a>
                  </div>
                </div>
              {% endif %}
            {% endfor %}
          </div>

          <!-- Pagination for this tag -->
          <div class="pagination-wrapper mt-8 flex justify-center" data-tab="{{ tag | handle }}">
            <!-- Pagination will be generated by JavaScript -->
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Insights Blog Section",
  "settings": [
    {
      "type": "blog",
      "id": "blog",
      "label": "Select blog"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Get insights from us"
    },
    {
      "type": "range",
      "id": "posts_per_page",
      "min": 3,
      "max": 15,
      "step": 3,
      "default": 9,
      "label": "Posts per page"
    },
    {
      "type": "select",
      "id": "tag_sort",
      "label": "Tag sorting",
      "options": [
        {
          "value": "asc",
          "label": "A to Z"
        },
        {
          "value": "desc",
          "label": "Z to A"
        }
      ],
      "default": "asc"
    }
  ]
}
{% endschema %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    // Pagination functionality
    function createPagination(tabId) {
      const tabContent = document.querySelector(`[data-tab="${tabId}"]`);
      if (!tabContent) return;

      const articlesGrid = tabContent.querySelector('.articles-grid');
      const articles = articlesGrid.querySelectorAll('.article-item');
      const postsPerPage = parseInt(articlesGrid.dataset.postsPerPage) || 9;
      const totalPages = Math.ceil(articles.length / postsPerPage);

      if (totalPages <= 1) {
        // Hide pagination if only one page
        const paginationWrapper = tabContent.querySelector('.pagination-wrapper');
        if (paginationWrapper) paginationWrapper.style.display = 'none';
        return;
      }

      let currentPage = 1;

      function showPage(page) {
        const startIndex = (page - 1) * postsPerPage;
        const endIndex = startIndex + postsPerPage;

        articles.forEach((article, index) => {
          if (index >= startIndex && index < endIndex) {
            article.style.display = 'block';
          } else {
            article.style.display = 'none';
          }
        });

        updatePaginationButtons(page);
      }

      function createPaginationButtons() {
        const paginationWrapper = tabContent.querySelector('.pagination-wrapper');
        if (!paginationWrapper) return;

        let paginationHTML = '<div class="pagination flex items-center gap-2">';

        // Previous button
        paginationHTML += `
        <button class="prev-btn px-4 py-2 text-[#1E6C44] bg-white border border-[#1E6C44] rounded-lg hover:bg-[#1E6C44] hover:text-white transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed" ${
          currentPage === 1 ? 'disabled' : ''
        }>
          Previous
        </button>
      `;

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
          const isActive = i === currentPage;
          paginationHTML += `
          <button class="page-btn px-4 py-2 ${
            isActive ? 'bg-[#1E6C44] text-white' : 'text-[#1E6C44] bg-white border border-[#1E6C44]'
          } rounded-lg hover:bg-[#1E6C44] hover:text-white transition-colors duration-300" data-page="${i}">
            ${i}
          </button>
        `;
        }

        // Next button
        paginationHTML += `
        <button class="next-btn px-4 py-2 text-[#1E6C44] bg-white border border-[#1E6C44] rounded-lg hover:bg-[#1E6C44] hover:text-white transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed" ${
          currentPage === totalPages ? 'disabled' : ''
        }>
          Next
        </button>
      `;

        paginationHTML += '</div>';
        paginationWrapper.innerHTML = paginationHTML;

        // Add event listeners
        const prevBtn = paginationWrapper.querySelector('.prev-btn');
        const nextBtn = paginationWrapper.querySelector('.next-btn');
        const pageButtons = paginationWrapper.querySelectorAll('.page-btn');

        prevBtn?.addEventListener('click', () => {
          if (currentPage > 1) {
            currentPage--;
            showPage(currentPage);
          }
        });

        nextBtn?.addEventListener('click', () => {
          if (currentPage < totalPages) {
            currentPage++;
            showPage(currentPage);
          }
        });

        pageButtons.forEach((btn) => {
          btn.addEventListener('click', () => {
            currentPage = parseInt(btn.dataset.page);
            showPage(currentPage);
          });
        });
      }

      function updatePaginationButtons(page) {
        const paginationWrapper = tabContent.querySelector('.pagination-wrapper');
        if (!paginationWrapper) return;

        const prevBtn = paginationWrapper.querySelector('.prev-btn');
        const nextBtn = paginationWrapper.querySelector('.next-btn');
        const pageButtons = paginationWrapper.querySelectorAll('.page-btn');

        // Update previous button
        if (prevBtn) {
          prevBtn.disabled = page === 1;
        }

        // Update next button
        if (nextBtn) {
          nextBtn.disabled = page === totalPages;
        }

        // Update page buttons
        pageButtons.forEach((btn) => {
          const btnPage = parseInt(btn.dataset.page);
          if (btnPage === page) {
            btn.classList.add('bg-[#1E6C44]', 'text-white');
            btn.classList.remove('text-[#1E6C44]', 'bg-white', 'border', 'border-[#1E6C44]');
          } else {
            btn.classList.remove('bg-[#1E6C44]', 'text-white');
            btn.classList.add('text-[#1E6C44]', 'bg-white', 'border', 'border-[#1E6C44]');
          }
        });
      }

      // Initialize pagination
      createPaginationButtons();
      showPage(1);
    }

    // Tab functionality
    tabBtns.forEach((btn) => {
      btn.addEventListener('click', () => {
        const tab = btn.dataset.tab;

        // Remove active class from all buttons
        tabBtns.forEach((b) => {
          b.classList.remove('bg-[#1E6C44]', 'text-white', 'active-tab');
          b.classList.add('bg-white', 'text-[#1E6C44]');
        });

        // Add active class to clicked button
        btn.classList.add('bg-[#1E6C44]', 'text-white', 'active-tab');
        btn.classList.remove('bg-white', 'text-[#1E6C44]');

        // Hide all tab contents
        tabContents.forEach((content) => {
          content.classList.add('hidden');
          content.classList.remove('block');
        });

        // Show clicked tab content
        const targetTab = document.querySelector(`.tab-content[data-tab="${tab}"]`);
        if (targetTab) {
          targetTab.classList.remove('hidden');
          targetTab.classList.add('block');

          // Initialize pagination for this tab
          setTimeout(() => {
            createPagination(tab);
          }, 100);
        }
      });
    });

    // Initialize pagination for the active tab (All)
    createPagination('all');
  });
</script>
