<!-- register.liquid template -->
<div class="register-page grid grid-cols-1 md:grid-cols-2 bg-[#1E6C44] min-h-screen">
  <div class="overflow-auto py-25 max-h-screen">
    <div class="w-full mx-auto px-5 min-w-full 2xl:min-w-164 lg:w-53.5 mb-7.5 lg:mb-9 xl:mb-11 2xl:mb-12.5">
      <a href="{{ routes.root_url }}" class="w-31.5 mb-7.5 md:mb-9 lg:mb-11 xl:mb-12.5 block mx-auto">
        <img src="{{ 'login-icon.png' | asset_url }}" width="" height="" class="size-full object-center" alt="">
      </a>

      <p class="text-white text-2xl lg:text-3xl xl:text-[32px] font-medium !leading-[1.25] font-poppins mb-1.4 lg:mb-3">
        Sign Up
      </p>
      <p class="text-[#B7D6C6] text-base md:text-lg xl:text-xl !leading-[1.6]">
        Fill your information below or register with your account.
      </p>

      {% form 'create_customer', id: 'signup-form' %}
        <div class="flex flex-col lg:flex-row gap-4 lg:gap-5 lg:mb-5 mt-5 lg:mt-8">
          <div class="w-full mb-4 md:mb-0">
            <label class="block text-white text-lg lg:text-[22px] !leading-[1.25] mb-2">First Name*</label>
            <input
              type="text"
              name="customer[first_name]"
              placeholder="Enter First Name"
              required
              class="w-full text-base lg:text-xl text-[#B7D6C6] placeholder:text-[#B7D6C6] border border-[#B7D6C6] bg-[#2A7A51] py-4 px-5 rounded-lg focus:outline-none focus:border-[#FFC801]"
            >
          </div>
          <div class="w-full mb-4 lg:mb-0">
            <label class="block text-white text-lg lg:text-[22px] !leading-[1.25] mb-2">Last Name*</label>
            <input
              type="text"
              name="customer[last_name]"
              placeholder="Enter Last Name"
              required
              class="w-full text-base lg:text-xl text-[#B7D6C6] placeholder:text-[#B7D6C6] border border-[#B7D6C6] bg-[#2A7A51] py-4 px-5 rounded-lg focus:outline-none focus:border-[#FFC801]"
            >
          </div>
        </div>

        <div class="w-full mb-4 lg:mb-5">
          <label class="block text-white text-lg lg:text-[22px] !leading-[1.25] mb-2">Email*</label>
          <div class="relative">
            <input
              type="email"
              name="customer[email]"
              id="email-input"
              placeholder="Enter Email Address"
              required
              class="w-full text-base lg:text-xl text-[#B7D6C6] placeholder:text-[#B7D6C6] border border-[#B7D6C6] bg-[#2A7A51] py-4 px-5 rounded-lg focus:outline-none focus:border-[#FFC801]"
            >
            <!-- Loading spinner -->
            <div id="email-loading" class="absolute right-4 top-1/2 transform -translate-y-1/2 hidden">
              <svg
                class="animate-spin h-5 w-5 text-[#B7D6C6]"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </div>
          </div>
          <!-- Email check result -->
          <div id="email-check-result" class="mt-2 text-sm hidden"></div>
        </div>

        <div class="w-full mb-4 lg:mb-5">
          {% render 'password-input' %}
          <div class="flex items-center justify-between mt-3 lg:mt-3">
            <div class="flex items-center gap-1.5 lg:gap-2">
              <label class="flex xl:items-center gap-2 cursor-pointer">
                <div class="checkbox-wrapper-23">
                  <input type="checkbox" id="check-23">
                  <label for="check-23" style="--size: 22px">
                    <svg viewBox="0,0,50,50">
                      <path d="M5 30 L 20 45 L 45 5"></path>
                    </svg>
                  </label>
                </div>
                <div class="xl:flex items-center gap-1">
                  <p
                    class="text-white text-base md:text-lg lg:text-xl font-poppins !leading-[1.2] flex items-center gap-1"
                  >
                    Agree with
                    <a href="#" class="text-[#FFC801] !underline">Terms & Condition</a> and
                  </p>
                  <a
                    href="#"
                    class="text-base md:text-lg lg:text-xl mt-2 lg:mt-0 block font-poppins !leading-[1.2] text-[#FFC801] !underline"
                  >
                    Privacy Policy</a
                  >
                </div>
              </label>
            </div>
          </div>
        </div>

        <div class="w-full mb-4 lg:mb-8">
          <button
            type="submit"
            id="signup-btn"
            disabled
            class="text-[#1F1904] text-base py-4 w-full font-medium font-poppins text-center px-5 rounded-lg bg-primary cursor-not-allowed transition-all duration-300"
          >
            <span id="btn-text">Sign Up</span>
            <span id="btn-loader" class="hidden">
              <svg
                class="animate-spin -ml-1 mr-3 h-5 w-5 text-[#1F1904] inline"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Creating Account...
            </span>
          </button>
        </div>
      {% endform %}

      <div class="relative z-1 mb-6 lg:mb-8">
        <div class="h-[1px] w-[35%] bg-[#B7D6C6] absolute left-0 top-1/2 -translate-y-1/2"></div>
        <div class="h-[1px] w-[35%] bg-[#B7D6C6] absolute right-0 top-1/2 -translate-y-1/2"></div>
        <p class="text-white text-base lg:text-xl font-medium font-poppins text-center">Sign In</p>
      </div>

      <p class="text-white text-base lg:text-xl !leading-[1.2] mt-5 lg:mt-8 text-center">
        Already have an account?
        <a href="{{ routes.account_login_url }}" class="text-[#FFC801] underline hover:text-[#e6b301]">Sign In</a>
      </p>
    </div>
  </div>

  <div class="hidden md:flex bg-[#FFC801] justify-end py-13 h-screen">
    <img class="w-full object-contain h-full" width="" height="" src="{{ 'login-img.png' | asset_url }}" alt="">
  </div>
</div>

<!-- Success Modal -->
<div id="success-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg p-8 max-w-md mx-4 text-center">
    <div class="text-green-500 text-6xl mb-4">✅</div>
    <h3 class="text-2xl font-bold text-gray-800 mb-2">Registration Successful!</h3>
    <p class="text-gray-600 mb-4">Welcome! Your account has been created successfully.</p>
    <p class="text-sm text-gray-500">Redirecting to home page...</p>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const emailInput = document.getElementById('email-input');
    const emailLoading = document.getElementById('email-loading');
    const emailCheckResult = document.getElementById('email-check-result');
    const signupBtn = document.getElementById('signup-btn');
    const btnText = document.getElementById('btn-text');
    const btnLoader = document.getElementById('btn-loader');
    const form = document.getElementById('signup-form');
    const successModal = document.getElementById('success-modal');

    let emailCheckTimeout;
    let isEmailAvailable = false;

    // Email validation function
    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    // Check email availability using customer password reset
    function checkEmailAvailability(email) {
      // Show loading
      emailLoading.classList.remove('hidden');
      emailCheckResult.classList.add('hidden');

      // Use password recovery form to check if email exists
      const formData = new FormData();
      formData.append('form_type', 'recover_customer_password');
      formData.append('email', email);

      fetch('{{ routes.account_recover_url }}', {
        method: 'POST',
        body: formData,
      })
        .then((response) => response.text())
        .then((html) => {
          emailLoading.classList.add('hidden');

          // Parse the response to check for success or error messages
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');

          // Check for success message (means email exists)
          const successMsg =
            doc.querySelector('.note') ||
            doc.querySelector('[class*="success"]') ||
            doc.querySelector('[class*="message"]');

          // Check for error message (means email doesn't exist)
          const errorMsg = doc.querySelector('.errors') || doc.querySelector('[class*="error"]');

          if (
            successMsg &&
            (successMsg.textContent.includes('sent') ||
              successMsg.textContent.includes('instructions') ||
              successMsg.textContent.includes('reset'))
          ) {
            // Email exists (password reset instructions sent)
            isEmailAvailable = false;
            emailCheckResult.innerHTML = '❌ <span class="text-red-400">Email is already registered</span>';
            emailCheckResult.classList.remove('hidden');
            emailInput.classList.add('border-red-500');
            emailInput.classList.remove('border-green-500');
            updateSignupButton();
          } else if (
            errorMsg ||
            html.includes('not found') ||
            html.includes('not exist') ||
            html.includes('no account')
          ) {
            // Email doesn't exist (available for registration)
            isEmailAvailable = true;
            emailCheckResult.innerHTML = '✅ <span class="text-green-400">Email is available</span>';
            emailCheckResult.classList.remove('hidden');
            emailInput.classList.remove('border-red-500');
            emailInput.classList.add('border-green-500');
            updateSignupButton();
          } else {
            // Unable to determine, allow registration attempt
            isEmailAvailable = true;
            emailCheckResult.innerHTML =
              '⚠️ <span class="text-yellow-400">Unable to verify email, you can try to register</span>';
            emailCheckResult.classList.remove('hidden');
            emailInput.classList.remove('border-red-500', 'border-green-500');
            updateSignupButton();
          }
        })
        .catch((error) => {
          console.error('Email check error:', error);
          emailLoading.classList.add('hidden');
          // On error, allow registration attempt
          isEmailAvailable = true;
          emailCheckResult.innerHTML =
            '⚠️ <span class="text-yellow-400">Unable to verify email, you can try to register</span>';
          emailCheckResult.classList.remove('hidden');
          emailInput.classList.remove('border-red-500', 'border-green-500');
          updateSignupButton();
        });
    }

    // Update signup button state
    function updateSignupButton() {
      const email = emailInput.value.trim();

      if (!email) {
        signupBtn.disabled = true;
        signupBtn.className =
          'text-[#1F1904] text-xl py-4 w-full font-medium font-poppins text-center px-5 rounded-lg bg-primary cursor-not-allowed transition-all duration-300';
        btnText.textContent = 'Sign Up';
      } else if (!isValidEmail(email)) {
        signupBtn.disabled = true;
        signupBtn.className =
          'text-[#1F1904] text-base py-4 w-full font-medium font-poppins text-center px-5 rounded-lg bg-red-500 cursor-not-allowed transition-all duration-300';
        btnText.textContent = 'Invalid Email Format';
      } else if (!isEmailAvailable) {
        signupBtn.disabled = true;
        signupBtn.className =
          'text-[#1F1904] text-base py-4 w-full font-medium font-poppins text-center px-5 rounded-lg bg-red-500 cursor-not-allowed transition-all duration-300';
        btnText.textContent = 'Email Already Registered';
      } else {
        signupBtn.disabled = false;
        signupBtn.className =
          'text-[#1F1904] text-base py-4 w-full font-medium font-poppins text-center px-5 rounded-lg bg-[#FFC801] hover:bg-[#e6b301] cursor-pointer transition-all duration-300';
        btnText.textContent = 'Sign Up';
      }
    }

    // Email input event listener
    emailInput.addEventListener('input', function () {
      const email = this.value.trim();

      // Clear previous states
      clearTimeout(emailCheckTimeout);
      emailCheckResult.classList.add('hidden');
      emailLoading.classList.add('hidden');
      this.classList.remove('border-red-500', 'border-green-500');
      isEmailAvailable = false;

      if (email && isValidEmail(email)) {
        // Debounce email checking
        emailCheckTimeout = setTimeout(() => {
          checkEmailAvailability(email);
        }, 800);
      }

      updateSignupButton();
    });

    // Form submission
    form.addEventListener('submit', function (e) {
      e.preventDefault();

      if (!isEmailAvailable) {
        return;
      }

      // Show loading state
      signupBtn.disabled = true;
      btnText.classList.add('hidden');
      btnLoader.classList.remove('hidden');

      // Submit the form
      const formData = new FormData(form);

      fetch('{{ routes.account_url }}', {
        method: 'POST',
        body: formData,
      })
        .then((response) => response.text())
        .then((html) => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');

          // Check for errors
          const errors = doc.querySelector('.errors') || doc.querySelector('[class*="error"]');

          // Check for success indicators (no errors and account page elements)
          const accountElements =
            doc.querySelector('[class*="account"]') || doc.querySelector('#customer') || doc.querySelector('.customer');

          // Check if redirected to account page or success page
          const isSuccess =
            !errors &&
            (accountElements ||
              html.includes('welcome') ||
              html.includes('successful') ||
              window.location.href.includes('/account'));

          if (
            errors &&
            (errors.textContent.includes('already') ||
              errors.textContent.includes('associated') ||
              errors.textContent.includes('exists'))
          ) {
            // Email already registered error
            btnText.classList.remove('hidden');
            btnLoader.classList.add('hidden');
            signupBtn.disabled = false;

            // Update email check result
            isEmailAvailable = false;
            emailCheckResult.innerHTML = '❌ <span class="text-red-400">Email is already registered</span>';
            emailCheckResult.classList.remove('hidden');
            emailInput.classList.add('border-red-500');
            updateSignupButton();
          } else if (errors) {
            // Other registration errors
            btnText.classList.remove('hidden');
            btnLoader.classList.add('hidden');
            signupBtn.disabled = false;

            // Show error message
            emailCheckResult.innerHTML = '❌ <span class="text-red-400">' + errors.textContent.trim() + '</span>';
            emailCheckResult.classList.remove('hidden');
          } else {
            // Registration successful
            successModal.classList.remove('hidden');
            form.reset();

            // Reset email check states
            isEmailAvailable = false;
            emailCheckResult.classList.add('hidden');
            emailInput.classList.remove('border-red-500', 'border-green-500');

            // Redirect to home page after 3 seconds
            setTimeout(() => {
              window.location.href = '{{ routes.login_url }}';
            }, 3000);
          }
        })
        .catch((error) => {
          console.error('Registration error:', error);
          btnText.classList.remove('hidden');
          btnLoader.classList.add('hidden');
          signupBtn.disabled = false;

          // Show generic error
          emailCheckResult.innerHTML =
            '❌ <span class="text-red-400">Network error. Please check your connection and try again.</span>';
          emailCheckResult.classList.remove('hidden');
        });
    });

    // Initialize button state
    updateSignupButton();
  });
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  input:focus {
    box-shadow: 0 0 0 2px rgba(255, 200, 1, 0.3);
  }

  input.border-red-500:focus {
    box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.3);
  }

  input.border-green-500:focus {
    box-shadow: 0 0 0 2px rgba(34, 197, 94, 0.3);
  }
</style>
