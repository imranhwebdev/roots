<section class="customer-account">
  <!-- Header -->
  {%- render 'account-banner' -%}

  <div class="flex flex-col md:flex-row md:flex-nowrap flex-wrap xl:w-11/12 mx-auto gap-6 px-6 justify-between ga-5 py-10 md:py-16 lg:py-20 xl:py-25">
    <!-- Sidebar Tabs -->
    <aside class="w-full md:w-4/12 xl:w-4/12">
      <ul class="space-y-2">
        <li>
          <button
            class="tab-btn cursor-pointer text-[#514849] w-full text-left text-lg md:text-xl lg:text-[26px] py-4 md:py-5 lg:py-5.5 px-5 md:px-6 lg:px-8 mb-2 md:mb-3 2xl:mb-4 font-medium !leading-[1.2] font-poppins border md:border-[1.2px] border-[#E3E2E0] rounded-lg bg-[#1E6C44] text-white"
            data-tab="info"
          >
            Personal Information
          </button>
        </li>
        <li>
          <button
            data-tab="orders"
            class="tab-btn cursor-pointer text-[#514849] w-full text-left text-lg md:text-xl lg:text-[26px] py-4 md:py-5 lg:py-5.5 px-5 md:px-6 lg:px-8 mb-2 md:mb-3 2xl:mb-4 font-medium !leading-[1.2] font-poppins border md:border-[1.2px] border-[#E3E2E0] rounded-lg"
          >
            My Orders
          </button>
        </li>
        <li>
          <button
            data-tab="address"
            class="tab-btn cursor-pointer text-[#514849] w-full text-left text-lg md:text-xl lg:text-[26px] py-4 md:py-5 lg:py-5.5 px-5 md:px-6 lg:px-8 mb-2 md:mb-3 2xl:mb-4 font-medium !leading-[1.2] font-poppins border md:border-[1.2px] border-[#E3E2E0] rounded-lg"
          >
            Manage Address
          </button>
        </li>
        <li>
          <button
            data-tab="password"
            class="tab-btn cursor-pointer text-[#514849] w-full text-left text-lg md:text-xl lg:text-[26px] py-4 md:py-5 lg:py-5.5 px-5 md:px-6 lg:px-8 mb-2 md:mb-3 2xl:mb-4 font-medium !leading-[1.2] font-poppins border md:border-[1.2px] border-[#E3E2E0] rounded-lg"
          >
            Password Manager
          </button>
        </li>
        <li>
          <button
            data-tab="logout"
            class="tab-btn cursor-pointer text-[#514849] w-full text-left text-lg md:text-xl lg:text-[26px] py-4 md:py-5 lg:py-5.5 px-5 md:px-6 lg:px-8 mb-2 md:mb-3 2xl:mb-4  font-medium !leading-[1.2] font-poppins  border md:border-[1.2px] border-[#E3E2E0] rounded-lg hover:bg-green hover:text-white transition-all duration-300"
            data-tab="info"
          >
            Logout
          </button>
        </li>
      </ul>
    </aside>

    <!-- Content Area -->
    <div class="w-full md:w-8/12 xl:w-7/12">
      <!-- Personal Information -->
      <div class="tab-content" id="info">
        {%- render 'customer-personal-info' -%}
      </div>

      <!-- Orders -->
      <div class="tab-content hidden" id="orders">
        {%- render 'customer-account-my-orders' -%}
      </div>

      <!-- Addresses -->
      <div class="tab-content hidden" id="address">
        {%- render 'customer-manage-address' -%}
      </div>

      <!-- Password -->
      <div class="tab-content hidden" id="password">
        {%- render 'customer-password-manager' -%}
      </div>
      <!-- Logout -->

      <div class="tab-content hidden" id="logout">
        {%- render 'logout' -%}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        // Remove active classes from all tabs
        tabButtons.forEach((b) => {
          b.classList.remove('bg-[#1E6C44]', 'text-white');
          b.classList.add('text-[#514849]');
        });

        // Add active classes to clicked tab
        btn.classList.add('bg-[#1E6C44]', 'text-white');
        btn.classList.remove('text-[#514849]');

        // Hide all tab contents
        tabContents.forEach((c) => c.classList.add('hidden'));

        // Show selected tab content
        const targetTab = document.getElementById(btn.dataset.tab);
        if (targetTab) {
          targetTab.classList.remove('hidden');
        }
      });
    });

    // Dropdown functionality
    const dropdownBtn = document.getElementById('dropdownBtn');
    const dropdownMenu = document.getElementById('dropdownMenu');
    const selectedText = document.getElementById('selectedText');
    const dropdownItems = document.querySelectorAll('.dropdown-item');

    if (dropdownBtn && dropdownMenu) {
      dropdownBtn.addEventListener('click', (e) => {
        e.preventDefault();
        dropdownMenu.classList.toggle('hidden');
      });

      dropdownItems.forEach((item) => {
        item.addEventListener('click', (e) => {
          selectedText.textContent = e.target.textContent;
          dropdownMenu.classList.add('hidden');
        });
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!dropdownBtn.contains(e.target) && !dropdownMenu.contains(e.target)) {
          dropdownMenu.classList.add('hidden');
        }
      });
    }

    // Password visibility toggle
    const passwordFields = document.querySelectorAll('input[type="password"]');
    passwordFields.forEach((field) => {
      const container = field.parentElement;
      const toggleBtn = container.querySelector('button');

      if (toggleBtn) {
        toggleBtn.addEventListener('click', (e) => {
          e.preventDefault();

          if (field.type === 'password') {
            field.type = 'text';
            toggleBtn.innerHTML = '<img src="{{ 'eye-slash-icon.svg' | asset_url }}" class="size-full" alt="" width="" height="">';
          } else {
            field.type = 'password';
            toggleBtn.innerHTML = '<img src="{{ 'eye-icon.svg' | asset_url }}" class="size-full" alt="" width="" height="">';
          }
        });
      }
    });
  });

  document.addEventListener('DOMContentLoaded', function () {
    const profileInput = document.getElementById('profileImageInput');
    const profileImg = document.getElementById('profileImage');

    profileInput.addEventListener('change', function (e) {
      const file = e.target.files[0];
      if (file) {
        // 1. Show instant preview
        const reader = new FileReader();
        reader.onload = function (event) {
          profileImg.src = event.target.result;
        };
        reader.readAsDataURL(file);

        // 2. Save to Shopify metafield (needs custom app/backend endpoint)
        const formData = new FormData();
        formData.append('avatar', file);

        fetch('/apps/save-avatar', {
          // <-- replace with your backend route
          method: 'POST',
          body: formData,
          headers: { 'X-Requested-With': 'XMLHttpRequest' },
        })
          .then((res) => res.json())
          .then((data) => {
            console.log('Avatar saved:', data);
            // Optional: refresh after save
            // location.reload();
          })
          .catch((err) => console.error('Error saving avatar:', err));
      }
    });
  });
</script>

<style>
  .btn {
    @apply bg-[#1E6C44] text-white py-4 lg:py-5 px-6 lg:px-8 rounded-lg font-medium text-lg lg:text-xl transition-colors duration-300 hover:bg-[#155a37] focus:outline-none focus:ring-2 focus:ring-[#1E6C44] focus:ring-offset-2;
  }

  .tab-btn:hover {
    @apply bg-gray-50;
  }

  .tab-btn.active {
    @apply bg-[#1E6C44] text-white;
  }

  /* Custom dropdown styles */
  #dropdownMenu {
    @apply origin-top-right absolute right-0 mt-2 min-w-27 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50;
  }

  #dropdownMenu .dropdown-item:hover {
    @apply bg-gray-100;
  }

  /* Form validation styles */
  input:invalid:not(:placeholder-shown) {
    @apply border-red-500;
  }

  input:valid:not(:placeholder-shown) {
    @apply border-green-500;
  }

  /* Responsive improvements */
  @media (max-width: 768px) {
    .tab-content {
      @apply px-4;
    }

    .btn {
      @apply w-full text-center;
    }
  }
</style>
