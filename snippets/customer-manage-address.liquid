{% comment %}
  Dynamic Address Management for Shopify - Client Design
  Clean and modern design with yellow accent colors
{% endcomment %}

<!-- Existing Addresses Display -->
<div id="addressList">
  {% for address in customer.addresses %}
    <div
      class="address-card rounded-lg border  border-[#E3E2E0] bg-[#FCFBF7] p-5 md:p-6 lg:p-7 xl:p-8 3xl:p-10 mb-5 md:pb-6 lg:mb-7 xl:mb-8 3xl:mb-10"
      data-address-id="{{ address.id }}"
    >
      <div class="flex flex-col lg:flex-row flex-wrap lg:flex-nowrap lg:items-center lg:justify-between gap-4 ">
        <div class="flex items-start gap-3">
          <span class="size-13 lg:size-14.5 flex-[0_0_auto] border border-[#E3E2E0] rounded-full p-4 flex items-center justify-center"
            ><img src="{{'location.svg' |  asset_url}}" class="size-full" alt="" width="" height=""
          ></span>
          <div>
            <h3 class="text-[#21201E] text-lg lg:text-[22px] font-medium !leading-[1.25] font-poppins mb-2">
              {{ address.first_name }}
              {{ address.last_name }}
              {% if address == customer.default_address %}
                <span class="bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded-full ml-2">Default</span>
              {% endif %}
            </h3>
            <div class="text-[#797375] text-lg lg:text-xl !leading-[1.2]">
              {{ address.address1 -}}
              {%- if address.address2 %}, {{ address.address2 }}{% endif -%}
              <br>
              {{ address.city }}, {{ address.province }}
              {{ address.zip -}}
              <br>
              {% if address.phone %}{{ address.phone }}{% endif %}
            </div>
          </div>
        </div>
        <div class=" max-w-max flex items-center gap-7 lg:gap-8 border border-[#E3E2E0] rounded-[150px] lg:rounded-[198px] py-3.5 lg:py-4.5 px-5.5 lg:px-6.5 relative z-">
          <span class="h-4 w-[1px] bg-[#E3E2E0] absolute left-1/2 top-1/2 -translate-y-1/2 -translate-x-1/2"></span>
          <button
            class="edit-btn size-5 lg:size-6 flex-[0_0_auto]"
            data-action="edit"
            data-id="{{ address.id }}"
            data-first-name="{{ address.first_name }}"
            data-last-name="{{ address.last_name }}"
            data-company="{{ address.company }}"
            data-address1="{{ address.address1 }}"
            data-address2="{{ address.address2 }}"
            data-phone="{{ address.phone }}"
            data-zip="{{ address.zip }}"
            data-city="{{ address.city }}"
            data-province="{{ address.province }}"
            data-country="{{ address.country }}"
            data-default="{{ address == customer.default_address }}"
          >
            <img src="{{'edit-icon.svg' |  asset_url}}" class="size-full" alt="" width="" height="">
          </button>
          <form method="post" action="{{ address.url }}" class="inline" onsubmit="return confirmDelete()">
            <input type="hidden" name="form_type" value="customer_address">
            <input type="hidden" name="_method" value="delete">
            <input type="hidden" name="return_to" value="{{ request.path }}">
            <button
              type="submit"
              class="size-5 lg:size-6 flex-[0_0_auto] cursor-pointer"
            >
              <img src="{{'delete-icon.svg' |  asset_url}}" class="size-full" alt="" width="" height="">
            </button>
          </form>
        </div>
      </div>
      <!-- Add New Address Button -->
      <button
        id="addNewBtn"
        class="btn mt-5 md:mt-6 lg:mt-7 xl:mt-8 3xl:mt-10"
      >
        Add New Address
      </button>
    </div>
  {% endfor %}
</div>

<!-- Address Form -->
<div id="addressFormContainer" class="hidden">
  <div>
    <h2
      id="formTitle"
      class=" text-[#0D2E1D] text-xl lg:text-2xl xl:text-[32px] font-medium font-poppins !leading-[1.25] mb-5 lg:mb-6"
    >
      Add New Address
    </h2>

    <form id="addressForm" method="post" action="/account/addresses" class="space-y-4">
      <input type="hidden" id="formType" name="form_type" value="customer_address">
      <input type="hidden" id="addressId" name="address[id]" value="">
      <input type="hidden" id="methodField" name="_method" value="">
      <input type="hidden" name="return_to" value="{{ request.path }}">
      <input type="hidden" name="utf8" value="âœ“">

      <!-- First Name & Last Name Row -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]"
            >First Name*</label
          >
          <input
            id="firstName"
            name="address[first_name]"
            type="text"
            placeholder="Leslie"
            value="{{ customer.first_name }}"
            required
            class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg"
          >
        </div>
        <div>
          <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Last Name*</label>
          <input
            id="lastName"
            name="address[last_name]"
            type="text"
            placeholder="Cooper"
            value="{{ customer.last_name }}"
            required
            class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg"
          >
        </div>
      </div>

      <!-- Email (Remove this as it's not part of Shopify address) -->
      <!-- Company -->
      <div>
        <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Company</label>
        <input
          id="company"
          name="address[company]"
          type="text"
          placeholder="Company Name (Optional)"
          class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg"
        >
      </div>

      <!-- Street Address -->
      <div>
        <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]"
          >Street Address*</label
        >
        <input
          id="address1"
          name="address[address1]"
          type="text"
          placeholder="2464 Royal Ln"
          required
          class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg"
        >
      </div>

      <!-- Apartment/Suite -->
      <div>
        <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]"
          >Apartment, Suite, etc.</label
        >
        <input
          id="address2"
          name="address[address2]"
          type="text"
          placeholder="Apartment, suite, unit, building, floor, etc."
          class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg"
        >
      </div>

      <!-- Phone & Zip Code Row -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Phone</label>
          <input
            id="phone"
            name="address[phone]"
            type="tel"
            placeholder="+1234567890"
            class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg"
          >
        </div>
        <div>
          <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Zip Code*</label>
          <input
            id="zip"
            name="address[zip]"
            type="text"
            placeholder="45463"
            required
            class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg"
          >
        </div>
      </div>

      <!-- City & State Row -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">City*</label>
          <input
            id="city"
            name="address[city]"
            type="text"
            placeholder="Mesa"
            required
            class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg"
          >
        </div>
        <div class="relative">
          <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">State*</label>
          <select
            id="province"
            name="address[province]"
            required
            class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375]  border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg appearance-none"
          >
            <!-- United States -->
            <option value="">Select State</option>
            <option value="Alabama">Alabama</option>
            <option value="Alaska">Alaska</option>
            <option value="Arizona">Arizona</option>
            <option value="Arkansas">Arkansas</option>
            <option value="California">California</option>
            <option value="Colorado">Colorado</option>
            <option value="Connecticut">Connecticut</option>
            <option value="Delaware">Delaware</option>
            <option value="Florida">Florida</option>
            <option value="Georgia">Georgia</option>
            <option value="Hawaii">Hawaii</option>
            <option value="Idaho">Idaho</option>
            <option value="Illinois">Illinois</option>
            <option value="Indiana">Indiana</option>
            <option value="Iowa">Iowa</option>
            <option value="Kansas">Kansas</option>
            <option value="Kentucky">Kentucky</option>
            <option value="Louisiana">Louisiana</option>
            <option value="Maine">Maine</option>
            <option value="Maryland">Maryland</option>
            <option value="Massachusetts">Massachusetts</option>
            <option value="Michigan">Michigan</option>
            <option value="Minnesota">Minnesota</option>
            <option value="Mississippi">Mississippi</option>
            <option value="Missouri">Missouri</option>
            <option value="Montana">Montana</option>
            <option value="Nebraska">Nebraska</option>
            <option value="Nevada">Nevada</option>
            <option value="New Hampshire">New Hampshire</option>
            <option value="New Jersey">New Jersey</option>
            <option value="New Mexico">New Mexico</option>
            <option value="New York">New York</option>
            <option value="North Carolina">North Carolina</option>
            <option value="North Dakota">North Dakota</option>
            <option value="Ohio">Ohio</option>
            <option value="Oklahoma">Oklahoma</option>
            <option value="Oregon">Oregon</option>
            <option value="Pennsylvania">Pennsylvania</option>
            <option value="Rhode Island">Rhode Island</option>
            <option value="South Carolina">South Carolina</option>
            <option value="South Dakota">South Dakota</option>
            <option value="Tennessee">Tennessee</option>
            <option value="Texas">Texas</option>
            <option value="Utah">Utah</option>
            <option value="Vermont">Vermont</option>
            <option value="Virginia">Virginia</option>
            <option value="Washington">Washington</option>
            <option value="West Virginia">West Virginia</option>
            <option value="Wisconsin">Wisconsin</option>
            <option value="Wyoming">Wyoming</option>
          </select>
          <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none mt-8">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              class="text-gray-400"
            >
              <polyline points="6,9 12,15 18,9"/>
            </svg>
          </div>
        </div>
      </div>

      <!-- Country -->
      <div>
        <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Country*</label>
        <select
          id="country"
          name="address[country]"
          required
          class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg appearance-none"
        >
          <option value="">Select Country</option>
          <option value="United States" selected>United States</option>
          <option value="Canada">Canada</option>
          <option value="United Kingdom">United Kingdom</option>
          <option value="Australia">Australia</option>
          <option value="Germany">Germany</option>
          <option value="France">France</option>
          <option value="Japan">Japan</option>
          <option value="Bangladesh">Bangladesh</option>
          <option value="India">India</option>
        </select>
      </div>



      <!-- Form Actions -->
      <div class="flex gap-4 pt-4">
        <button
          type="submit"
          id="saveBtn"
          class="bg-yellow-400 hover:bg-yellow-500 text-black font-medium px-6 py-3 rounded-lg transition-colors duration-200 flex items-center gap-2"
        >
          <span id="saveText">Save Address</span>
          <span id="saveLoading" class="hidden flex items-center gap-2">
            <svg class="animate-spin w-4 h-4" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"/>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
            </svg>
            Saving...
          </span>
        </button>
        <button
          type="button"
          id="cancelBtn"
          class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium px-6 py-3 rounded-lg transition-colors duration-200"
        >
          Cancel
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Success Message -->
<div
  id="successMsg"
  class="hidden fixed top-4 right-4 bg-green-100 border border-green-200 text-green-700 px-4 py-3 rounded-lg z-50 shadow-lg"
>
  <div class="flex items-center gap-2">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <polyline points="20,6 9,17 4,12"/>
    </svg>
    <span id="successText">Action completed successfully!</span>
  </div>
</div>

<!-- Error Message -->
<div
  id="errorMsg"
  class="hidden fixed top-4 right-4 bg-red-100 border border-red-200 text-red-700 px-4 py-3 rounded-lg z-50 shadow-lg"
>
  <div class="flex items-center gap-2">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="12" cy="12" r="10"/>
      <line x1="15" y1="9" x2="9" y2="15"/>
      <line x1="9" y1="9" x2="15" y2="15"/>
    </svg>
    <span id="errorText">An error occurred. Please try again.</span>
  </div>
</div>

<style>
  .hidden {
    display: none;
  }

  .address-card {
    transition: all 0.2s ease;
  }

  .address-card:hover {
    transform: translateY(-1px);
  }

  .error-field {
    border-color: #ef4444 !important;
    background-color: #fef2f2 !important;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  #successMsg,
  #errorMsg {
    animation: slideIn 0.3s ease;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  .fade-out {
    animation: fadeOut 0.3s ease forwards;
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
      transform: scale(1);
    }
    to {
      opacity: 0;
      transform: scale(0.95);
    }
  }

  /* Custom select arrow positioning */
  select {
    background-image: none;
  }

  /* Focus states */
  input:focus,
  select:focus {
    box-shadow: 0 0 0 3px rgba(251, 191, 36, 0.1);
  }

  /* Loading spinner */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>

<script>
  (function () {
    'use strict';

    let isInitialized = false;

    function initAddressManager() {
      if (isInitialized) return;
      isInitialized = true;

      const addNewBtn = document.getElementById('addNewBtn');
      const formContainer = document.getElementById('addressFormContainer');
      const addressForm = document.getElementById('addressForm');
      const cancelBtn = document.getElementById('cancelBtn');
      const saveBtn = document.getElementById('saveBtn');
      const formTitle = document.getElementById('formTitle');

      if (!addNewBtn || !formContainer || !addressForm) {
        console.warn('Address form elements not found');
        return;
      }

      let currentMode = 'add';
      let editingAddressId = null;

      // Show/Hide form
      function toggleForm(show, mode = 'add') {
        currentMode = mode;
        if (show) {
          formContainer.classList.remove('hidden');
          formTitle.textContent = mode === 'add' ? 'Add New Address' : 'Edit Address';
          addNewBtn.classList.add('hidden');

          // Set form action and method based on mode
          if (mode === 'edit' && editingAddressId) {
            addressForm.action = '/account/addresses/' + editingAddressId;
            document.getElementById('methodField').value = 'put';
            document.getElementById('addressId').value = editingAddressId;
          } else {
            addressForm.action = '/account/addresses';
            document.getElementById('methodField').value = '';
            document.getElementById('addressId').value = '';
          }

          // Smooth scroll to form
          formContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
        } else {
          formContainer.classList.add('hidden');
          addNewBtn.classList.remove('hidden');
          resetForm();
          editingAddressId = null;
        }
      }

      // Reset form
      function resetForm() {
        addressForm.reset();
        // Set default customer data
        document.getElementById('firstName').value = '{{ customer.first_name }}';
        document.getElementById('lastName').value = '{{ customer.last_name }}';
        document.getElementById('country').value = 'United States'; // Set default country
        clearErrors();
      }

      // Clear error states
      function clearErrors() {
        document.querySelectorAll('.error-field').forEach((field) => {
          field.classList.remove('error-field');
        });
      }

      // Validate form
      function validateForm() {
        const required = ['firstName', 'lastName', 'address1', 'city', 'zip', 'province', 'country'];
        let isValid = true;

        required.forEach((id) => {
          const field = document.getElementById(id);
          if (field && !field.value.trim()) {
            field.classList.add('error-field');
            isValid = false;
          } else if (field) {
            field.classList.remove('error-field');
          }
        });

        return isValid;
      }

      // Show message
      function showMessage(message, isError = false) {
        const msgElement = document.getElementById(isError ? 'errorMsg' : 'successMsg');
        const textElement = document.getElementById(isError ? 'errorText' : 'successText');

        if (msgElement && textElement) {
          textElement.textContent = message;
          msgElement.classList.remove('hidden');

          setTimeout(() => {
            msgElement.classList.add('hidden');
          }, 5000);
        }
      }

      // Populate form for editing
      function populateForm(data) {
        document.getElementById('firstName').value = data.firstName || '';
        document.getElementById('lastName').value = data.lastName || '';
        document.getElementById('company').value = data.company || '';
        document.getElementById('address1').value = data.address1 || '';
        document.getElementById('address2').value = data.address2 || '';
        document.getElementById('phone').value = data.phone || '';
        document.getElementById('zip').value = data.zip || '';
        document.getElementById('city').value = data.city || '';
        document.getElementById('province').value = data.province || '';
        document.getElementById('country').value = data.country || 'United States';
        document.getElementById('isDefault').checked = data.default === 'true';
      }

      // Event listeners
      addNewBtn.addEventListener('click', function () {
        toggleForm(true, 'add');
      });

      cancelBtn.addEventListener('click', function () {
        toggleForm(false);
      });

      // Form submission - Simple approach first
      addressForm.addEventListener('submit', function (e) {
        if (!validateForm()) {
          e.preventDefault();
          showMessage('Please fill in all required fields correctly', true);
          return;
        }

        // Show loading state
        const saveText = document.getElementById('saveText');
        const saveLoading = document.getElementById('saveLoading');

        if (saveText && saveLoading) {
          saveBtn.disabled = true;
          saveText.classList.add('hidden');
          saveLoading.classList.remove('hidden');
        }

        // Let the form submit naturally to Shopify
        // Don't prevent default - let Shopify handle it
      });

      // Edit button handler
      document.addEventListener('click', function (e) {
        const editBtn = e.target.closest('[data-action="edit"]');
        if (!editBtn) return;

        e.preventDefault();

        editingAddressId = editBtn.dataset.id;
        const data = {
          firstName: editBtn.dataset.firstName,
          lastName: editBtn.dataset.lastName,
          company: editBtn.dataset.company,
          address1: editBtn.dataset.address1,
          address2: editBtn.dataset.address2,
          phone: editBtn.dataset.phone,
          zip: editBtn.dataset.zip,
          city: editBtn.dataset.city,
          province: editBtn.dataset.province,
          country: editBtn.dataset.country,
          default: editBtn.dataset.default,
        };

        populateForm(data);
        toggleForm(true, 'edit');
      });

      // Phone formatting
      const phoneInput = document.getElementById('phone');
      if (phoneInput) {
        phoneInput.addEventListener('input', function (e) {
          let value = this.value.replace(/\D/g, '');

          if (value.length > 10) {
            value = value.slice(0, 10);
          }

          if (value.length >= 6) {
            value = `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6)}`;
          } else if (value.length >= 3) {
            value = `(${value.slice(0, 3)}) ${value.slice(3)}`;
          }

          this.value = value;
        });
      }

      // Handle URL parameters for success/error messages
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('address_saved') === 'true') {
        showMessage('Address saved successfully!');
        // Clean URL
        window.history.replaceState({}, document.title, window.location.pathname);
      }
      if (urlParams.get('address_deleted') === 'true') {
        showMessage('Address deleted successfully!');
        // Clean URL
        window.history.replaceState({}, document.title, window.location.pathname);
      }
      if (urlParams.get('address_error') === 'true') {
        showMessage('Error with address operation. Please try again.', true);
        window.history.replaceState({}, document.title, window.location.pathname);
      }
    }

    // Handle delete with AJAX
    document.addEventListener('submit', function (e) {
      if (e.target.querySelector('input[name="_method"][value="delete"]')) {
        e.preventDefault();

        if (!confirm('Are you sure you want to delete this address? This action cannot be undone.')) {
          return;
        }

        const form = e.target;
        const formData = new FormData(form);

        fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
          },
        })
          .then((response) => {
            if (response.redirected || response.url.includes('/account')) {
              // If Shopify redirects, go to current page with success message
              window.location.href = window.location.pathname + '?address_deleted=true';
              return;
            }
            if (response.ok) {
              const addressCard = form.closest('.address-card');
              if (addressCard) {
                addressCard.classList.add('fade-out');
                setTimeout(() => {
                  addressCard.remove();
                  showMessage('Address deleted successfully!');
                }, 300);
              }
            } else {
              throw new Error('Network response was not ok');
            }
          })
          .catch((error) => {
            console.error('Error:', error);
            // Fallback: submit form normally if AJAX fails
            formData.append('return_to', window.location.pathname + '?address_deleted=true');
            const tempForm = document.createElement('form');
            tempForm.method = 'POST';
            tempForm.action = form.action;
            tempForm.style.display = 'none';

            for (let [key, value] of formData.entries()) {
              const input = document.createElement('input');
              input.type = 'hidden';
              input.name = key;
              input.value = value;
              tempForm.appendChild(input);
            }

            document.body.appendChild(tempForm);
            tempForm.submit();
          });
      }
    });

    // Global delete confirmation function
    window.confirmDelete = function () {
      return confirm('Are you sure you want to delete this address? This action cannot be undone.');
    };

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initAddressManager);
    } else {
      initAddressManager();
    }
  })();

  const countryStates = {
    'United States': [
      'Alabama',
      'Alaska',
      'Arizona',
      'Arkansas',
      'California',
      'Colorado',
      'Connecticut',
      'Delaware',
      'Florida',
      'Georgia',
      'Hawaii',
      'Idaho',
      'Illinois',
      'Indiana',
      'Iowa',
      'Kansas',
      'Kentucky',
      'Louisiana',
      'Maine',
      'Maryland',
      'Massachusetts',
      'Michigan',
      'Minnesota',
      'Mississippi',
      'Missouri',
      'Montana',
      'Nebraska',
      'Nevada',
      'New Hampshire',
      'New Jersey',
      'New Mexico',
      'New York',
      'North Carolina',
      'North Dakota',
      'Ohio',
      'Oklahoma',
      'Oregon',
      'Pennsylvania',
      'Rhode Island',
      'South Carolina',
      'South Dakota',
      'Tennessee',
      'Texas',
      'Utah',
      'Vermont',
      'Virginia',
      'Washington',
      'West Virginia',
      'Wisconsin',
      'Wyoming',
    ],
    Canada: [
      'Alberta',
      'British Columbia',
      'Manitoba',
      'New Brunswick',
      'Newfoundland and Labrador',
      'Nova Scotia',
      'Ontario',
      'Prince Edward Island',
      'Quebec',
      'Saskatchewan',
    ],
    'United Kingdom': ['England', 'Scotland', 'Wales', 'Northern Ireland'],
    Australia: [
      'New South Wales',
      'Queensland',
      'South Australia',
      'Tasmania',
      'Victoria',
      'Western Australia',
      'Australian Capital Territory',
      'Northern Territory',
    ],
    Germany: [
      'Bavaria',
      'Berlin',
      'Brandenburg',
      'Bremen',
      'Hamburg',
      'Hesse',
      'Lower Saxony',
      'Mecklenburg-Vorpommern',
      'North Rhine-Westphalia',
      'Rhineland-Palatinate',
      'Saarland',
      'Saxony',
      'Saxony-Anhalt',
      'Schleswig-Holstein',
      'Thuringia',
    ],
    France: [
      'ÃŽle-de-France',
      'Provence-Alpes-CÃ´te dâ€™Azur',
      'Nouvelle-Aquitaine',
      'Occitanie',
      'Auvergne-RhÃ´ne-Alpes',
      'Hauts-de-France',
      'Normandy',
      'Brittany',
      'Pays de la Loire',
      'Grand Est',
      'Bourgogne-Franche-ComtÃ©',
      'Centre-Val de Loire',
      'Corsica',
    ],
    Japan: ['Hokkaido', 'Tohoku', 'Kanto', 'Chubu', 'Kinki (Kansai)', 'Chugoku', 'Shikoku', 'Kyushu'],
    Bangladesh: ['Dhaka', 'Chattogram', 'Khulna', 'Rajshahi', 'Sylhet', 'Barishal', 'Rangpur', 'Mymensingh'],
    India: [
      'Andhra Pradesh',
      'Arunachal Pradesh',
      'Assam',
      'Bihar',
      'Chhattisgarh',
      'Goa',
      'Gujarat',
      'Haryana',
      'Himachal Pradesh',
      'Jharkhand',
      'Karnataka',
      'Kerala',
      'Madhya Pradesh',
      'Maharashtra',
      'Manipur',
      'Meghalaya',
      'Mizoram',
      'Nagaland',
      'Odisha',
      'Punjab',
      'Rajasthan',
      'Sikkim',
      'Tamil Nadu',
      'Telangana',
      'Tripura',
      'Uttar Pradesh',
      'Uttarakhand',
      'West Bengal',
      'Delhi (NCT)',
      'Jammu and Kashmir',
      'Ladakh',
    ],
  };

  const countrySelect = document.getElementById('country');
  const provinceSelect = document.getElementById('province');

  countrySelect.addEventListener('change', function () {
    const selectedCountry = this.value;
    provinceSelect.innerHTML = '<option value="">Select State</option>';

    if (countryStates[selectedCountry]) {
      countryStates[selectedCountry].forEach((state) => {
        const option = document.createElement('option');
        option.value = state;
        option.textContent = state;
        provinceSelect.appendChild(option);
      });
    }
  });
</script>
