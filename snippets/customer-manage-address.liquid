{% comment %}
  Fixed Dynamic Address Management for Shopify
  Now properly integrates with Shopify's address system
{% endcomment %}

<!-- Existing Addresses Display -->
<div id="addressList">
  {% for address in customer.addresses %}
    <div
      class="address-card rounded-lg border border-[#E3E2E0] bg-[#FCFBF7] p-5 md:p-6 lg:p-7 xl:p-8 3xl:p-10 mb-5 md:pb-6 lg:mb-7 xl:mb-8 3xl:mb-10"
      data-address-id="{{ address.id }}"
    >
      <div class="flex flex-col lg:flex-row flex-wrap lg:flex-nowrap lg:items-center lg:justify-between gap-4 mb-5 md:pb-6 lg:mb-7 xl:mb-8 3xl:mb-10">
        <div class="flex items-center gap-3">
          <span class="size-13 lg:size-14.5 flex-[0_0_auto] border border-[#E3E2E0] rounded-full p-4 flex items-center justify-center">
            <img src="/assets/location.svg" class="size-full" alt="" width="" height="">
          </span>
          <div class="">
            <h6 class="text-[#21201E] text-lg lg:text-[22px] font-medium !leading-[1.25] font-poppins mb-2 flex items-center gap-2">
              {{ address.first_name }}
              {{ address.last_name }}
              {% if address == customer.default_address %}
                <span class="default-badge bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full"
                  >Default</span
                >
              {% endif %}
            </h6>
            <p class="text-[#797375] text-lg lg:text-xl !leading-[1.2]">
              {{ address.address1 -}}
              {%- if address.address2 %}, {{ address.address2 }}{% endif -%}
              <br>
              {{ address.city }}, {{ address.province }}
              {{ address.zip -}}
              <br>
              {{ address.country }}
              {% if address.phone %}
                <br>
                Phone: {{ address.phone }}
              {% endif %}
            </p>
          </div>
        </div>
        <div class="max-w-max flex items-center gap-7 lg:gap-8 border border-[#E3E2E0] rounded-[150px] lg:rounded-[198px] py-3.5 lg:py-4.5 px-5.5 lg:px-6.5 relative z-1">
          <span class="h-4 w-[1px] bg-[#E3E2E0] absolute left-1/2 top-1/2 -translate-y-1/2 -translate-x-1/2"></span>
          <button
            class="size-5 lg:size-6 flex-[0_0_auto] edit-btn cursor-pointer"
            data-action="edit"
            data-id="{{ address.id }}"
            data-first-name="{{ address.first_name }}"
            data-last-name="{{ address.last_name }}"
            data-company="{{ address.company }}"
            data-address1="{{ address.address1 }}"
            data-address2="{{ address.address2 }}"
            data-city="{{ address.city }}"
            data-province="{{ address.province }}"
            data-zip="{{ address.zip }}"
            data-country="{{ address.country }}"
            data-phone="{{ address.phone }}"
            data-default="{{ address == customer.default_address }}"
          >
            <img src="/assets/edit-icon.svg" class="size-full" alt="Edit" width="" height="">
          </button>
          <form method="post" action="{{ address.url }}" class="inline" onsubmit="return confirmDelete()">
            <input type="hidden" name="form_type" value="customer_address">
            <input type="hidden" name="_method" value="delete">
            <button
              type="submit"
              class="size-5 lg:size-6 flex-[0_0_auto] delete-btn cursor-pointer bg-transparent border-0 p-0"
            >
              <img src="/assets/delete-icon.svg" class="size-full" alt="Delete" width="" height="">
            </button>
          </form>
        </div>
      </div>
    </div>
  {% endfor %}
</div>

<!-- Add New Address Button -->
<button id="addNewBtn" class="btn bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg mb-8">
  Add New Address
</button>

<!-- Address Form -->
<div id="addressFormContainer" class="hidden">
  <h2
    id="formTitle"
    class="text-[#0D2E1D] text-xl lg:text-2xl xl:text-[32px] font-medium font-poppins !leading-[1.25] mb-5 lg:mb-6"
  >
    Add New Address
  </h2>

  <form id="addressForm" method="post" action="/account/addresses" class="grid grid-cols-2 gap-4 lg:gap-5 xl:gap-6">
    <input type="hidden" id="formType" name="form_type" value="customer_address">
    <input type="hidden" id="addressId" name="address[id]" value="">
    <input type="hidden" id="methodField" name="_method" value="">

    <!-- First Name -->
    <div class="col-span-2 lg:col-span-1">
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">First Name*</label>
      <input
        id="firstName"
        name="address[first_name]"
        placeholder="First Name"
        type="text"
        value="{{ customer.first_name }}"
        required
        class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg focus:border-blue-500 focus:outline-none"
      >
    </div>

    <!-- Last Name -->
    <div class="col-span-2 lg:col-span-1">
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Last Name*</label>
      <input
        id="lastName"
        name="address[last_name]"
        placeholder="Last Name"
        type="text"
        value="{{ customer.last_name }}"
        required
        class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg focus:border-blue-500 focus:outline-none"
      >
    </div>

    <!-- Company -->
    <div class="col-span-2">
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Company</label>
      <input
        id="company"
        name="address[company]"
        placeholder="Company Name (Optional)"
        type="text"
        class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg focus:border-blue-500 focus:outline-none"
      >
    </div>

    <!-- Street Address -->
    <div class="col-span-2">
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]"
        >Street Address*</label
      >
      <input
        id="address1"
        name="address[address1]"
        placeholder="Street Address"
        type="text"
        required
        class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg focus:border-blue-500 focus:outline-none"
      >
    </div>

    <!-- Apartment/Suite -->
    <div class="col-span-2">
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]"
        >Apartment, Suite, etc.</label
      >
      <input
        id="address2"
        name="address[address2]"
        placeholder="Apartment, suite, unit, building, floor, etc."
        type="text"
        class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg focus:border-blue-500 focus:outline-none"
      >
    </div>

    <!-- City -->
    <div class="col-span-2 lg:col-span-1">
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">City*</label>
      <input
        id="city"
        name="address[city]"
        placeholder="City"
        type="text"
        required
        class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg focus:border-blue-500 focus:outline-none"
      >
    </div>

    <!-- Zip Code -->
    <div class="col-span-2 lg:col-span-1">
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Zip Code*</label>
      <input
        id="zip"
        name="address[zip]"
        placeholder="Zip Code"
        type="text"
        required
        class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg focus:border-blue-500 focus:outline-none"
      >
    </div>

    <!-- State -->
    <div class="col-span-2 lg:col-span-1 relative z-1">
      <span class="w-3.5 h-2 rounded-full absolute right-5 lg:right-6 bottom-7 pointer-events-none">
        <img src="/assets/arrow-down.svg" class="size-full" width="" height="" alt="">
      </span>
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">State*</label>
      <select
        id="province"
        name="address[province]"
        required
        class="w-full border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 appearance-none rounded-lg text-[#797375] text-lg lg:text-xl !leading-[1.2] font-poppins focus:border-blue-500 focus:outline-none"
      >
        <option value="">Select State</option>
        <option value="Alabama">Alabama</option>
        <option value="Alaska">Alaska</option>
        <option value="Arizona">Arizona</option>
        <option value="Arkansas">Arkansas</option>
        <option value="California">California</option>
        <option value="Colorado">Colorado</option>
        <option value="Connecticut">Connecticut</option>
        <option value="Delaware">Delaware</option>
        <option value="Florida">Florida</option>
        <option value="Georgia">Georgia</option>
        <option value="Hawaii">Hawaii</option>
        <option value="Idaho">Idaho</option>
        <option value="Illinois">Illinois</option>
        <option value="Indiana">Indiana</option>
        <option value="Iowa">Iowa</option>
        <option value="Kansas">Kansas</option>
        <option value="Kentucky">Kentucky</option>
        <option value="Louisiana">Louisiana</option>
        <option value="Maine">Maine</option>
        <option value="Maryland">Maryland</option>
        <option value="Massachusetts">Massachusetts</option>
        <option value="Michigan">Michigan</option>
        <option value="Minnesota">Minnesota</option>
        <option value="Mississippi">Mississippi</option>
        <option value="Missouri">Missouri</option>
        <option value="Montana">Montana</option>
        <option value="Nebraska">Nebraska</option>
        <option value="Nevada">Nevada</option>
        <option value="New Hampshire">New Hampshire</option>
        <option value="New Jersey">New Jersey</option>
        <option value="New Mexico">New Mexico</option>
        <option value="New York">New York</option>
        <option value="North Carolina">North Carolina</option>
        <option value="North Dakota">North Dakota</option>
        <option value="Ohio">Ohio</option>
        <option value="Oklahoma">Oklahoma</option>
        <option value="Oregon">Oregon</option>
        <option value="Pennsylvania">Pennsylvania</option>
        <option value="Rhode Island">Rhode Island</option>
        <option value="South Carolina">South Carolina</option>
        <option value="South Dakota">South Dakota</option>
        <option value="Tennessee">Tennessee</option>
        <option value="Texas">Texas</option>
        <option value="Utah">Utah</option>
        <option value="Vermont">Vermont</option>
        <option value="Virginia">Virginia</option>
        <option value="Washington">Washington</option>
        <option value="West Virginia">West Virginia</option>
        <option value="Wisconsin">Wisconsin</option>
        <option value="Wyoming">Wyoming</option>
      </select>
    </div>

    <!-- Country -->
    <div class="col-span-2 lg:col-span-1 relative z-1">
      <span class="w-3.5 h-2 rounded-full absolute right-5 lg:right-6 bottom-7 pointer-events-none">
        <img src="/assets/arrow-down.svg" class="size-full" width="" height="" alt="">
      </span>
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Country*</label>
      <select
        id="country"
        name="address[country]"
        required
        class="w-full border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 appearance-none rounded-lg text-[#797375] text-lg lg:text-xl !leading-[1.2] font-poppins focus:border-blue-500 focus:outline-none"
      >
        <option value="">Select Country</option>
        <option value="United States">United States</option>
        <option value="Canada">Canada</option>
        <option value="Bangladesh">Bangladesh</option>
        <option value="India">India</option>
        <option value="United Kingdom">United Kingdom</option>
        <option value="Australia">Australia</option>
        <option value="Germany">Germany</option>
        <option value="France">France</option>
        <option value="Japan">Japan</option>
        <option value="Other">Other</option>
      </select>
    </div>

    <!-- Phone -->
    <div class="col-span-2">
      <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">Phone</label>
      <input
        id="phone"
        name="address[phone]"
        placeholder="+1234567890"
        type="tel"
        class="w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg focus:border-blue-500 focus:outline-none"
      >
    </div>

    <!-- Default Address -->
    <div class="col-span-2">
      <label class="flex items-center gap-3 cursor-pointer">
        <input id="isDefault" name="address[default]" type="checkbox" class="w-5 h-5" value="1">
        <span class="text-[#514849] text-lg font-medium">Set as default address</span>
      </label>
    </div>

    <!-- Form Actions -->
    <div class="col-span-2 flex gap-4">
      <button type="submit" id="saveBtn" class="btn bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700">
        <span id="saveText">Save Address</span>
        <span id="saveLoading" class="hidden">Saving...</span>
      </button>
      <button type="button" id="cancelBtn" class="btn bg-gray-200 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-300">
        Cancel
      </button>
    </div>
  </form>
</div>

<!-- Success Message -->
<div id="successMsg" class="hidden fixed top-4 right-4 bg-green-100 text-green-700 px-4 py-3 rounded-lg z-50 shadow-lg">
  <span id="successText">Action completed successfully!</span>
</div>

<!-- Error Message -->
<div id="errorMsg" class="hidden fixed top-4 right-4 bg-red-100 text-red-700 px-4 py-3 rounded-lg z-50 shadow-lg">
  <span id="errorText">An error occurred. Please try again.</span>
</div>

<style>
  .hidden {
    display: none;
  }
  .btn {
    transition: all 0.2s ease;
    border: none;
    cursor: pointer;
    font-weight: 500;
  }
  .address-card {
    transition: transform 0.2s ease;
  }
  .address-card:hover {
    transform: translateY(-1px);
  }
  .error-field {
    border-color: #ef4444 !important;
    background-color: #fef2f2 !important;
  }
  #successMsg,
  #errorMsg {
    animation: slideIn 0.3s ease;
  }
  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  .fade-out {
    animation: fadeOut 0.3s ease forwards;
  }
  @keyframes fadeOut {
    from {
      opacity: 1;
      transform: scale(1);
    }
    to {
      opacity: 0;
      transform: scale(0.95);
    }
  }
</style>

<script>
  (function () {
    'use strict';

    let isInitialized = false;

    function initAddressManager() {
      if (isInitialized) return;
      isInitialized = true;

      const addNewBtn = document.getElementById('addNewBtn');
      const formContainer = document.getElementById('addressFormContainer');
      const addressForm = document.getElementById('addressForm');
      const cancelBtn = document.getElementById('cancelBtn');
      const saveBtn = document.getElementById('saveBtn');
      const formTitle = document.getElementById('formTitle');

      if (!addNewBtn || !formContainer || !addressForm) {
        console.warn('Address form elements not found');
        return;
      }

      let currentMode = 'add';
      let editingAddressId = null;

      // Show/Hide form
      function toggleForm(show, mode = 'add') {
        currentMode = mode;
        if (show) {
          formContainer.classList.remove('hidden');
          formTitle.textContent = mode === 'add' ? 'Add New Address' : 'Edit Address';
          addNewBtn.classList.add('hidden');

          // Set form action and method based on mode
          if (mode === 'edit' && editingAddressId) {
            addressForm.action = '/account/addresses/' + editingAddressId;
            document.getElementById('methodField').value = 'put';
            document.getElementById('addressId').value = editingAddressId;
          } else {
            addressForm.action = '/account/addresses';
            document.getElementById('methodField').value = '';
            document.getElementById('addressId').value = '';
          }

          // Scroll to form
          formContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
        } else {
          formContainer.classList.add('hidden');
          addNewBtn.classList.remove('hidden');
          resetForm();
          editingAddressId = null;
        }
      }

      // Reset form
      function resetForm() {
        addressForm.reset();
        // Set default customer data
        document.getElementById('firstName').value = '{{ customer.first_name }}';
        document.getElementById('lastName').value = '{{ customer.last_name }}';
        clearErrors();
      }

      // Clear error states
      function clearErrors() {
        document.querySelectorAll('.error-field').forEach((field) => {
          field.classList.remove('error-field');
        });
      }

      // Validate form
      function validateForm() {
        const required = ['firstName', 'lastName', 'address1', 'city', 'zip', 'province', 'country'];
        let isValid = true;

        required.forEach((id) => {
          const field = document.getElementById(id);
          if (field && !field.value.trim()) {
            field.classList.add('error-field');
            isValid = false;
          } else if (field) {
            field.classList.remove('error-field');
          }
        });

        return isValid;
      }

      // Show message
      function showMessage(message, isError = false) {
        const msgElement = document.getElementById(isError ? 'errorMsg' : 'successMsg');
        const textElement = document.getElementById(isError ? 'errorText' : 'successText');

        if (msgElement && textElement) {
          textElement.textContent = message;
          msgElement.classList.remove('hidden');

          setTimeout(() => {
            msgElement.classList.add('hidden');
          }, 4000);
        }
      }

      // Populate form for editing
      function populateForm(data) {
        document.getElementById('firstName').value = data.firstName || '';
        document.getElementById('lastName').value = data.lastName || '';
        document.getElementById('company').value = data.company || '';
        document.getElementById('address1').value = data.address1 || '';
        document.getElementById('address2').value = data.address2 || '';
        document.getElementById('city').value = data.city || '';
        document.getElementById('zip').value = data.zip || '';
        document.getElementById('province').value = data.province || '';
        document.getElementById('country').value = data.country || '';
        document.getElementById('phone').value = data.phone || '';
        document.getElementById('isDefault').checked = data.default === 'true';
      }

      // Event listeners
      addNewBtn.addEventListener('click', function () {
        toggleForm(true, 'add');
      });

      cancelBtn.addEventListener('click', function () {
        toggleForm(false);
      });

      // Form submission
      addressForm.addEventListener('submit', function (e) {
        if (!validateForm()) {
          e.preventDefault();
          showMessage('Please fill in all required fields', true);
          return;
        }

        // Show loading state
        const saveText = document.getElementById('saveText');
        const saveLoading = document.getElementById('saveLoading');

        if (saveText && saveLoading) {
          saveBtn.disabled = true;
          saveText.classList.add('hidden');
          saveLoading.classList.remove('hidden');
        }

        // Let Shopify handle the form submission naturally
        // The form will submit to Shopify's endpoint
      });

      // Edit button handler
      document.addEventListener('click', function (e) {
        const editBtn = e.target.closest('[data-action="edit"]');
        if (!editBtn) return;

        e.preventDefault();

        editingAddressId = editBtn.dataset.id;
        const data = {
          firstName: editBtn.dataset.firstName,
          lastName: editBtn.dataset.lastName,
          company: editBtn.dataset.company,
          address1: editBtn.dataset.address1,
          address2: editBtn.dataset.address2,
          city: editBtn.dataset.city,
          province: editBtn.dataset.province,
          zip: editBtn.dataset.zip,
          country: editBtn.dataset.country,
          phone: editBtn.dataset.phone,
          default: editBtn.dataset.default,
        };

        populateForm(data);
        toggleForm(true, 'edit');
      });

      // Phone formatting
      const phoneInput = document.getElementById('phone');
      if (phoneInput) {
        phoneInput.addEventListener('input', function (e) {
          let value = this.value.replace(/\D/g, '');

          if (value.length > 10) {
            value = value.slice(0, 10);
          }

          if (value.length >= 6) {
            value = `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6)}`;
          } else if (value.length >= 3) {
            value = `(${value.slice(0, 3)}) ${value.slice(3)}`;
          }

          this.value = value;
        });
      }

      // Handle URL parameters for success/error messages
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('address_saved') === 'true') {
        showMessage('Address saved successfully!');
        // Clean URL
        window.history.replaceState({}, document.title, window.location.pathname);
      }
      if (urlParams.get('address_error') === 'true') {
        showMessage('Error saving address. Please try again.', true);
        window.history.replaceState({}, document.title, window.location.pathname);
      }
    }

    // Global delete confirmation function
    window.confirmDelete = function () {
      return confirm('Are you sure you want to delete this address? This action cannot be undone.');
    };

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initAddressManager);
    } else {
      initAddressManager();
    }
  })();
</script>
