<div class="password-manager-container">
  {% form 'customer' %}
    <!-- Hidden fields for form processing -->
    <input type="hidden" name="form_type" value="customer">
    <input type="hidden" name="utf8" value="✓">

    <div class="password-form-wrapper">
      <!-- Current Password Field -->
      <div class="password-field-group">
        <label class="password-label" for="current-password"> Current Password* </label>

        <div class="password-input-wrapper">
          <input
            id="current-password"
            placeholder="Enter Current Password"
            type="password"
            name="customer[password]"
            required
            autocomplete="current-password"
            class="password-input"
          >
          <button
            type="button"
            class="password-toggle"
            aria-label="Toggle password visibility"
            data-field="current"
          >
            <svg
              class="eye-icon eye-closed"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <svg
              class="eye-icon eye-open hidden"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" stroke="currentColor" stroke-width="2"/>
              <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
            </svg>
          </button>
        </div>

        <div class="field-validation hidden" id="current-validation">
          <div class="validation-message"></div>
        </div>

        <div class="forgot-password-link-wrapper">
          <a href="{{ routes.account_recover_url | default: '/account/recover' }}" class="forgot-password-link">
            Forgot Password?
          </a>
        </div>
      </div>

      <!-- New Password Field -->
      <div class="password-field-group">
        <label class="password-label" for="new-password"> New Password* </label>

        <div class="password-input-wrapper">
          <input
            id="new-password"
            placeholder="Enter New Password"
            type="password"
            name="customer[new_password]"
            required
            autocomplete="new-password"
            class="password-input"
            data-validate="new"
          >
          <button
            type="button"
            class="password-toggle"
            aria-label="Toggle new password visibility"
            data-field="new"
          >
            <svg
              class="eye-icon eye-closed"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 711.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <svg
              class="eye-icon eye-open hidden"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" stroke="currentColor" stroke-width="2"/>
              <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
            </svg>
          </button>
        </div>

        <!-- Dynamic Password Strength Indicator -->
        <div class="password-strength-container">
          <div class="strength-meter">
            <div class="strength-bar">
              <div class="strength-fill" data-strength="0"></div>
            </div>
            <div class="strength-label">Enter password</div>
          </div>

          <!-- Dynamic Requirements Checklist -->
          <div class="requirements-list">
            <div class="requirement-item" data-requirement="length">
              <span class="requirement-icon">○</span>
              <span class="requirement-text">At least 8 characters</span>
            </div>
            <div class="requirement-item" data-requirement="uppercase">
              <span class="requirement-icon">○</span>
              <span class="requirement-text">One uppercase letter (A-Z)</span>
            </div>
            <div class="requirement-item" data-requirement="lowercase">
              <span class="requirement-icon">○</span>
              <span class="requirement-text">One lowercase letter (a-z)</span>
            </div>
            <div class="requirement-item" data-requirement="number">
              <span class="requirement-icon">○</span>
              <span class="requirement-text">One number (0-9)</span>
            </div>
            <div class="requirement-item" data-requirement="special">
              <span class="requirement-icon">○</span>
              <span class="requirement-text">One special character (!@#$%)</span>
            </div>
            <div class="requirement-item" data-requirement="common">
              <span class="requirement-icon">○</span>
              <span class="requirement-text">Not a common password</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Confirm New Password Field -->
      <div class="password-field-group">
        <label class="password-label" for="confirm-password"> Confirm New Password* </label>

        <div class="password-input-wrapper">
          <input
            id="confirm-password"
            placeholder="Confirm New Password"
            type="password"
            name="customer[new_password_confirmation]"
            required
            autocomplete="new-password"
            class="password-input"
            data-validate="confirm"
          >
          <button
            type="button"
            class="password-toggle"
            aria-label="Toggle confirm password visibility"
            data-field="confirm"
          >
            <svg
              class="eye-icon eye-closed"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <svg
              class="eye-icon eye-open hidden"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" stroke="currentColor" stroke-width="2"/>
              <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
            </svg>
          </button>
        </div>

        <!-- Dynamic Password Match Indicator -->
        <div class="password-match-indicator hidden">
          <div class="match-message"></div>
        </div>
      </div>

      <!-- Submit Button with Dynamic States -->
      <div class="submit-button-wrapper">
        <button
          type="submit"
          class="update-password-btn"
          id="update-password-btn"
          disabled
        >
          <span class="btn-text">Update Password</span>
          <span class="btn-loading hidden">
            <svg class="loading-spinner" width="20" height="20" viewBox="0 0 24 24">
              <circle class="loading-circle" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" opacity="0.25"/>
              <path class="loading-path" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" opacity="0.75"/>
            </svg>
            Updating...
          </span>
        </button>

        <!-- Dynamic Button Feedback -->
        <div class="button-feedback hidden">
          <div class="feedback-message"></div>
        </div>
      </div>

      <!-- Dynamic Messages Container -->
      <div class="messages-container">
        <!-- Shopify Form Messages -->
        {% if form.errors %}
          <div class="error-message">
            <div class="message-content">
              <svg class="message-icon" width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
              </svg>
              <div>
                <strong>Error updating password:</strong>
                {% for field in form.errors %}
                  {% for message in form.errors[field] %}
                    <p>{{ message | escape }}</p>
                  {% endfor %}
                {% endfor %}
              </div>
            </div>
          </div>
        {% endif %}

        {% if form.posted_successfully? %}
          <div class="success-message">
            <div class="message-content">
              <svg class="message-icon" width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
              </svg>
              <div>
                <strong>Password updated successfully! 🎉</strong>
                <p>Your password has been changed. Please use your new password for future logins.</p>
                <p>
                  <strong>Important:</strong> You will be logged out automatically in
                  <span id="countdown">5</span> seconds...
                </p>
                <p><em>Please login again with your new password.</em></p>
              </div>
            </div>
          </div>
          <script>
            // Clear any stored password data
            if (typeof Storage !== 'undefined') {
              sessionStorage.clear();
              localStorage.removeItem('customer_login');
            }

            // Dynamic countdown and redirect to login
            let countdown = 5;
            const countdownEl = document.getElementById('countdown');
            const timer = setInterval(() => {
              countdown--;
              if (countdownEl) countdownEl.textContent = countdown;
              if (countdown <= 0) {
                clearInterval(timer);
                // Force logout and redirect to login page
                window.location.href = '/account/logout';
              }
            }, 1000);
          </script>
        {% endif %}

        <!-- Real-time Dynamic Messages -->
        <div id="dynamic-messages"></div>
      </div>
    </div>
  {% endform %}
</div>

<style>
  /* Base Styles */
  .password-manager-container {
    max-width: 500px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .password-form-wrapper {
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  /* Password Field Groups */
  .password-field-group {
    position: relative;
  }

  .password-label {
    display: block;
    font-size: 14px;
    font-weight: 600;
    color: #374151;
    margin-bottom: 8px;
    line-height: 1.4;
  }

  /* Password Input Wrapper */
  .password-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .password-input {
    width: 100%;
    padding: 12px 50px 12px 16px;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 16px;
    color: #111827;
    background-color: #f9fafb;
    transition: all 0.3s ease;
    outline: none;
    box-sizing: border-box;
    font-family: inherit;
  }

  .password-input::placeholder {
    color: #9ca3af;
    font-size: 16px;
  }

  .password-input:focus {
    border-color: #3b82f6;
    background-color: #fff;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Dynamic Input States */
  .password-input.invalid {
    border-color: #ef4444;
    background-color: #fef2f2;
    animation: shake 0.5s ease-in-out;
  }

  .password-input.valid {
    border-color: #10b981;
    background-color: #f0fdf4;
  }

  .password-input.checking {
    border-color: #f59e0b;
    background-color: #fffbeb;
  }

  @keyframes shake {
    0%,
    100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-5px);
    }
    75% {
      transform: translateX(5px);
    }
  }

  /* Password Toggle Button */
  .password-toggle {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    color: #6b7280;
    transition: all 0.3s ease;
    z-index: 2;
    border-radius: 4px;
  }

  .password-toggle:hover {
    color: #374151;
    background-color: rgba(0, 0, 0, 0.05);
  }

  .password-toggle:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 1px;
  }

  .eye-icon {
    width: 20px;
    height: 20px;
    transition: all 0.3s ease;
  }

  /* Field Validation */
  .field-validation {
    margin-top: 6px;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 14px;
    animation: slideDown 0.3s ease-out;
  }

  .field-validation.error {
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    color: #dc2626;
  }

  .field-validation.success {
    background-color: #f0fdf4;
    border: 1px solid #bbf7d0;
    color: #16a34a;
  }

  .field-validation.warning {
    background-color: #fffbeb;
    border: 1px solid #fed7aa;
    color: #d97706;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Forgot Password Link */
  .forgot-password-link-wrapper {
    margin-top: 6px;
    text-align: right;
  }

  .forgot-password-link {
    color: #3b82f6;
    text-decoration: underline;
    font-size: 14px;
    transition: all 0.3s ease;
  }

  .forgot-password-link:hover {
    color: #2563eb;
    text-decoration-thickness: 2px;
  }

  /* Dynamic Password Strength */
  .password-strength-container {
    margin-top: 12px;
    padding: 16px;
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .strength-meter {
    margin-bottom: 12px;
  }

  .strength-bar {
    width: 100%;
    height: 8px;
    background-color: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 8px;
  }

  .strength-fill {
    height: 100%;
    transition: all 0.5s ease;
    border-radius: 4px;
  }

  .strength-fill[data-strength='0'] {
    width: 0%;
    background-color: #e5e7eb;
  }

  .strength-fill[data-strength='1'] {
    width: 20%;
    background-color: #ef4444;
  }

  .strength-fill[data-strength='2'] {
    width: 40%;
    background-color: #f97316;
  }

  .strength-fill[data-strength='3'] {
    width: 60%;
    background-color: #eab308;
  }

  .strength-fill[data-strength='4'] {
    width: 80%;
    background-color: #22c55e;
  }

  .strength-fill[data-strength='5'] {
    width: 100%;
    background-color: #16a34a;
  }

  .strength-label {
    font-size: 14px;
    font-weight: 600;
    text-align: center;
    transition: color 0.3s ease;
  }

  .strength-label[data-strength='0'] {
    color: #6b7280;
  }
  .strength-label[data-strength='1'] {
    color: #ef4444;
  }
  .strength-label[data-strength='2'] {
    color: #f97316;
  }
  .strength-label[data-strength='3'] {
    color: #eab308;
  }
  .strength-label[data-strength='4'] {
    color: #22c55e;
  }
  .strength-label[data-strength='5'] {
    color: #16a34a;
  }

  /* Dynamic Requirements List */
  .requirements-list {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
  }

  .requirement-item {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 13px;
    transition: all 0.3s ease;
  }

  .requirement-icon {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    font-weight: bold;
    transition: all 0.3s ease;
    flex-shrink: 0;
  }

  .requirement-item.met .requirement-icon {
    background-color: #16a34a;
    color: white;
  }

  .requirement-item.met .requirement-text {
    color: #16a34a;
    font-weight: 500;
  }

  .requirement-item.met .requirement-icon::before {
    content: '✓';
  }

  .requirement-item:not(.met) .requirement-icon {
    background-color: #e5e7eb;
    color: #6b7280;
  }

  .requirement-item:not(.met) .requirement-text {
    color: #6b7280;
  }

  /* Password Match Indicator */
  .password-match-indicator {
    margin-top: 8px;
    animation: slideDown 0.3s ease-out;
  }

  .match-message {
    font-size: 14px;
    padding: 8px 12px;
    border-radius: 6px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .match-message.success {
    color: #16a34a;
    background-color: #f0fdf4;
    border: 1px solid #bbf7d0;
  }

  .match-message.error {
    color: #dc2626;
    background-color: #fef2f2;
    border: 1px solid #fecaca;
  }

  .match-message::before {
    content: '';
    width: 16px;
    height: 16px;
    border-radius: 50%;
    flex-shrink: 0;
  }

  .match-message.success::before {
    content: '✓';
    background-color: #16a34a;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
  }

  .match-message.error::before {
    content: '✗';
    background-color: #dc2626;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
  }

  /* Submit Button */
  .submit-button-wrapper {
    margin-top: 16px;
  }

  .update-password-btn {
    width: 100%;
    padding: 14px 24px;
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: #ffffff;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    position: relative;
    overflow: hidden;
    font-family: inherit;
  }

  .update-password-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }

  .update-password-btn:hover:not(:disabled)::before {
    left: 100%;
  }

  .update-password-btn:hover:not(:disabled) {
    background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
    transform: translateY(-1px);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
  }

  .update-password-btn:disabled {
    background: #e5e7eb;
    color: #9ca3af;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .update-password-btn:disabled::before {
    display: none;
  }

  /* Button Feedback */
  .button-feedback {
    margin-top: 8px;
    animation: slideDown 0.3s ease-out;
  }

  .feedback-message {
    font-size: 14px;
    padding: 8px 12px;
    border-radius: 6px;
    text-align: center;
  }

  .feedback-message.success {
    background-color: #f0fdf4;
    color: #16a34a;
    border: 1px solid #bbf7d0;
  }

  .feedback-message.error {
    background-color: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  /* Loading Spinner */
  .loading-spinner {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Messages */
  .messages-container {
    margin-top: 20px;
  }

  .error-message,
  .success-message {
    padding: 16px;
    border-radius: 8px;
    margin-bottom: 16px;
    animation: slideDown 0.3s ease-out;
  }

  .error-message {
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    color: #991b1b;
  }

  .success-message {
    background-color: #f0fdf4;
    border: 1px solid #bbf7d0;
    color: #166534;
  }

  .message-content {
    display: flex;
    align-items: flex-start;
    gap: 12px;
  }

  .message-icon {
    flex-shrink: 0;
    margin-top: 2px;
  }

  /* Dynamic Messages */
  .dynamic-message {
    padding: 12px 16px;
    border-radius: 8px;
    margin-bottom: 12px;
    animation: slideDown 0.3s ease-out;
    position: relative;
  }

  .dynamic-message.info {
    background-color: #eff6ff;
    border: 1px solid #dbeafe;
    color: #1e40af;
  }

  .dynamic-message.warning {
    background-color: #fffbeb;
    border: 1px solid #fed7aa;
    color: #d97706;
  }

  .dynamic-message.success {
    background-color: #f0fdf4;
    border: 1px solid #bbf7d0;
    color: #16a34a;
  }

  .dynamic-message.error {
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    color: #dc2626;
  }

  /* Utility Classes */
  .hidden {
    display: none !important;
  }

  .fade-in {
    animation: fadeIn 0.3s ease-out;
  }

  .fade-out {
    animation: fadeOut 0.3s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  /* Special styling for success state */
  .success-message #countdown {
    font-weight: bold;
    color: #16a34a;
    font-size: 1.2em;
    display: inline-block;
    padding: 2px 6px;
    background-color: rgba(22, 163, 74, 0.1);
    border-radius: 4px;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .password-manager-container {
      margin: 10px;
      padding: 16px;
    }

    .requirements-list {
      grid-template-columns: 1fr;
    }

    .password-input {
      font-size: 16px;
      padding: 14px 50px 14px 16px;
    }

    .forgot-password-link-wrapper {
      text-align: left;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const ShopifyPasswordManager = {
      // Configuration
      config: {
        minPasswordLength: 8,
        strengthUpdateDelay: 300,
        commonPasswords: [
          'password',
          'password123',
          '123456',
          '123456789',
          'qwerty',
          'abc123',
          'password1',
          '12345678',
          'welcome',
          'admin',
          'letmein',
          'monkey',
          '1234567890',
          'qwerty123',
        ],
        strengthLabels: ['Enter password', 'Very Weak', 'Weak', 'Fair', 'Good', 'Strong'],
      },

      // State management
      state: {
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
        passwordStrength: 0,
        isValidating: false,
        formSubmitted: false,
        requirements: {
          length: false,
          uppercase: false,
          lowercase: false,
          number: false,
          special: false,
          common: false,
        },
      },

      // Initialize
      init() {
        this.bindEvents();
        this.initializeUI();
        this.preventFormResubmission();
        console.log('✅ Shopify Password Manager initialized with correct field names');
      },

      // Initialize UI elements
      initializeUI() {
        this.updateSubmitButton();
        this.showMessage('Ready to update your password securely', 'info', 3000);
      },

      // Prevent form resubmission issues
      preventFormResubmission() {
        // Clear form data on page load if coming from a successful submission
        if (window.performance && window.performance.navigation.type === 1) {
          this.clearFormData();
        }

        // Handle browser back button
        window.addEventListener('pageshow', (event) => {
          if (event.persisted) {
            this.clearFormData();
          }
        });
      },

      // Clear form data
      clearFormData() {
        const inputs = document.querySelectorAll('.password-input');
        inputs.forEach((input) => {
          input.value = '';
          this.clearInputValidation(input);
        });

        this.resetState();
        this.updateSubmitButton();
        this.updateStrengthIndicator();
      },

      // Reset state
      resetState() {
        this.state = {
          currentPassword: '',
          newPassword: '',
          confirmPassword: '',
          passwordStrength: 0,
          isValidating: false,
          formSubmitted: false,
          requirements: {
            length: false,
            uppercase: false,
            lowercase: false,
            number: false,
            special: false,
            common: false,
          },
        };
      },

      // Bind all events
      bindEvents() {
        // Password toggle buttons
        document.querySelectorAll('.password-toggle').forEach((button) => {
          button.addEventListener('click', this.togglePasswordVisibility.bind(this));
        });

        // Input field events
        const currentPasswordInput = document.getElementById('current-password');
        const newPasswordInput = document.getElementById('new-password');
        const confirmPasswordInput = document.getElementById('confirm-password');

        if (currentPasswordInput) {
          currentPasswordInput.addEventListener('input', this.handleCurrentPasswordInput.bind(this));
          currentPasswordInput.addEventListener('blur', this.validateCurrentPassword.bind(this));
          currentPasswordInput.addEventListener('paste', this.handlePaste.bind(this));
        }

        if (newPasswordInput) {
          newPasswordInput.addEventListener(
            'input',
            this.debounce(this.handleNewPasswordInput.bind(this), this.config.strengthUpdateDelay)
          );
          newPasswordInput.addEventListener('blur', this.validateNewPassword.bind(this));
          newPasswordInput.addEventListener('paste', this.handlePaste.bind(this));
        }

        if (confirmPasswordInput) {
          confirmPasswordInput.addEventListener('input', this.handleConfirmPasswordInput.bind(this));
          confirmPasswordInput.addEventListener('blur', this.validatePasswordMatch.bind(this));
          confirmPasswordInput.addEventListener('paste', this.handlePaste.bind(this));
        }

        // Form submission
        const form = document.querySelector('.password-manager-container form');
        if (form) {
          form.addEventListener('submit', this.handleFormSubmit.bind(this));
        }

        // Real-time validation
        document.querySelectorAll('.password-input').forEach((input) => {
          input.addEventListener('focus', this.handleInputFocus.bind(this));
          input.addEventListener('blur', this.handleInputBlur.bind(this));
        });
      },

      // Handle paste events
      handlePaste(event) {
        setTimeout(() => {
          const input = event.target;
          if (input.id === 'new-password') {
            this.handleNewPasswordInput(event);
          } else if (input.id === 'confirm-password') {
            this.handleConfirmPasswordInput(event);
          } else if (input.id === 'current-password') {
            this.handleCurrentPasswordInput(event);
          }
        }, 10);
      },

      // Utility: Debounce function
      debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      },

      // Toggle password visibility with animation
      togglePasswordVisibility(event) {
        const button = event.currentTarget;
        const wrapper = button.closest('.password-input-wrapper');
        const input = wrapper.querySelector('input');
        const eyeClosed = button.querySelector('.eye-closed');
        const eyeOpen = button.querySelector('.eye-open');

        button.style.transform = 'translateY(-50%) scale(0.9)';

        setTimeout(() => {
          if (input.type === 'password') {
            input.type = 'text';
            eyeClosed.classList.add('hidden');
            eyeOpen.classList.remove('hidden');
            button.setAttribute('aria-label', 'Hide password');
          } else {
            input.type = 'password';
            eyeClosed.classList.remove('hidden');
            eyeOpen.classList.add('hidden');
            button.setAttribute('aria-label', 'Show password');
          }
          button.style.transform = 'translateY(-50%) scale(1)';
        }, 100);
      },

      // Handle current password input
      handleCurrentPasswordInput(event) {
        this.state.currentPassword = event.target.value.trim();
        this.clearInputValidation(event.target);
        this.updateSubmitButton();

        // Check if new password is same as current
        if (this.state.newPassword && this.state.newPassword === this.state.currentPassword) {
          this.showMessage('New password must be different from current password', 'warning', 4000);
        }
      },

      // Handle new password input with strength checking
      handleNewPasswordInput(event) {
        this.state.newPassword = event.target.value;
        this.calculatePasswordStrength(event.target.value);
        this.updatePasswordRequirements(event.target.value);
        this.updateStrengthIndicator();
        this.validatePasswordMatch();
        this.updateSubmitButton();
        this.clearInputValidation(event.target);

        // Check if new password is same as current
        if (this.state.currentPassword && this.state.newPassword === this.state.currentPassword) {
          this.showMessage('New password must be different from current password', 'warning', 4000);
        }
      },

      // Handle confirm password input
      handleConfirmPasswordInput(event) {
        this.state.confirmPassword = event.target.value;
        this.validatePasswordMatch();
        this.updateSubmitButton();
        this.clearInputValidation(event.target);
      },

      // Calculate password strength dynamically
      calculatePasswordStrength(password) {
        if (!password) {
          this.state.passwordStrength = 0;
          return;
        }

        let strength = 0;
        const checks = {
          length: password.length >= this.config.minPasswordLength,
          uppercase: /[A-Z]/.test(password),
          lowercase: /[a-z]/.test(password),
          number: /\d/.test(password),
          special: /[!@#$%^&*(),.?":{}|<>]/.test(password),
          common: !this.config.commonPasswords.includes(password.toLowerCase()),
        };

        this.state.requirements = checks;

        Object.values(checks).forEach((passed) => {
          if (passed) strength++;
        });

        // Bonus for longer passwords
        if (password.length >= 12) strength += 0.5;
        if (password.length >= 16) strength += 0.5;

        this.state.passwordStrength = Math.min(Math.floor(strength), 5);
      },

      // Update password requirements UI
      updatePasswordRequirements(password) {
        const requirements = document.querySelectorAll('.requirement-item');

        requirements.forEach((item) => {
          const requirement = item.getAttribute('data-requirement');

          if (this.state.requirements[requirement]) {
            if (!item.classList.contains('met')) {
              item.classList.add('met');
              item.style.transform = 'scale(1.05)';
              setTimeout(() => {
                item.style.transform = 'scale(1)';
              }, 200);
            }
          } else {
            item.classList.remove('met');
          }
        });
      },

      // Update strength indicator with animation
      updateStrengthIndicator() {
        const strengthFill = document.querySelector('.strength-fill');
        const strengthLabel = document.querySelector('.strength-label');

        if (strengthFill && strengthLabel) {
          strengthFill.setAttribute('data-strength', this.state.passwordStrength);
          strengthLabel.setAttribute('data-strength', this.state.passwordStrength);
          strengthLabel.textContent = this.config.strengthLabels[this.state.passwordStrength];

          // Add pulse animation for strength changes
          strengthFill.style.transform = 'scaleY(1.2)';
          setTimeout(() => {
            strengthFill.style.transform = 'scaleY(1)';
          }, 200);
        }
      },

      // Validate current password
      validateCurrentPassword(event) {
        const input = event.target;
        const value = input.value.trim();

        if (!value) {
          this.showInputValidation(input, 'Current password is required', 'error');
          input.classList.add('invalid');
        } else if (value.length < 6) {
          this.showInputValidation(input, 'Current password seems too short', 'warning');
          input.classList.add('checking');
        } else {
          this.clearInputValidation(input);
          input.classList.add('valid');
        }
      },

      // Validate new password
      validateNewPassword(event) {
        const input = event.target;
        const password = input.value;

        if (!password) {
          this.showInputValidation(input, 'New password is required', 'error');
          input.classList.add('invalid');
        } else if (this.state.passwordStrength < 3) {
          this.showInputValidation(input, 'Password is too weak. Please make it stronger.', 'warning');
          input.classList.add('checking');
        } else if (password === this.state.currentPassword && this.state.currentPassword) {
          this.showInputValidation(input, 'New password must be different from current password', 'error');
          input.classList.add('invalid');
        } else {
          this.clearInputValidation(input);
          input.classList.add('valid');
        }
      },

      // Validate password match with real-time feedback
      validatePasswordMatch() {
        const indicator = document.querySelector('.password-match-indicator');
        const confirmInput = document.getElementById('confirm-password');

        if (!indicator || !confirmInput) return;

        const newPassword = this.state.newPassword;
        const confirmPassword = this.state.confirmPassword;

        if (confirmPassword && newPassword) {
          indicator.classList.remove('hidden');

          let messageElement = indicator.querySelector('.match-message');
          if (!messageElement) {
            messageElement = document.createElement('div');
            messageElement.className = 'match-message';
            indicator.appendChild(messageElement);
          }

          if (newPassword === confirmPassword) {
            messageElement.className = 'match-message success';
            messageElement.textContent = 'Passwords match perfectly! ✨';
            confirmInput.classList.remove('invalid', 'checking');
            confirmInput.classList.add('valid');
          } else {
            messageElement.className = 'match-message error';
            messageElement.textContent = 'Passwords do not match';
            confirmInput.classList.remove('valid');
            confirmInput.classList.add('invalid');
          }
        } else {
          indicator.classList.add('hidden');
          confirmInput.classList.remove('valid', 'invalid', 'checking');
        }
      },

      // Show input validation message
      showInputValidation(input, message, type) {
        const fieldGroup = input.closest('.password-field-group');
        let validation = fieldGroup.querySelector('.field-validation');

        if (!validation) {
          validation = document.createElement('div');
          validation.className = 'field-validation';
          const messageDiv = document.createElement('div');
          messageDiv.className = 'validation-message';
          validation.appendChild(messageDiv);
          input.parentNode.insertAdjacentElement('afterend', validation);
        }

        const messageElement = validation.querySelector('.validation-message');
        validation.className = `field-validation ${type}`;
        messageElement.textContent = message;
        validation.classList.remove('hidden');
      },

      // Clear input validation
      clearInputValidation(input) {
        const fieldGroup = input.closest('.password-field-group');
        const validation = fieldGroup.querySelector('.field-validation');

        if (validation) {
          validation.classList.add('hidden');
        }

        input.classList.remove('invalid', 'valid', 'checking');
      },

      // Handle input focus
      handleInputFocus(event) {
        const input = event.target;
        const wrapper = input.closest('.password-input-wrapper');
        wrapper.style.transform = 'scale(1.01)';

        if (input.id === 'new-password') {
          this.showMessage('Create a strong password with mixed characters', 'info', 3000);
        } else if (input.id === 'current-password') {
          this.showMessage('Enter your current password to verify your identity', 'info', 3000);
        }
      },

      // Handle input blur
      handleInputBlur(event) {
        const input = event.target;
        const wrapper = input.closest('.password-input-wrapper');
        wrapper.style.transform = 'scale(1)';
      },

      // Update submit button state dynamically
      updateSubmitButton() {
        const submitBtn = document.getElementById('update-password-btn');

        if (!submitBtn || this.state.formSubmitted) return;

        const isValid = this.isFormValid();
        submitBtn.disabled = !isValid;

        if (!isValid && this.state.newPassword && this.state.confirmPassword) {
          this.showButtonFeedback('Please fix the errors above to continue', 'error');
        } else if (isValid) {
          this.showButtonFeedback('Ready to update password securely! 🔒', 'success');
        } else {
          this.hideButtonFeedback();
        }
      },

      // Check if form is valid
      isFormValid() {
        const hasCurrentPassword = this.state.currentPassword.length > 0;
        const hasStrongPassword = this.state.passwordStrength >= 3;
        const passwordsMatch =
          this.state.newPassword === this.state.confirmPassword && this.state.confirmPassword.length > 0;
        const passwordsDifferent = this.state.newPassword !== this.state.currentPassword || !this.state.currentPassword;

        return hasCurrentPassword && hasStrongPassword && passwordsMatch && passwordsDifferent;
      },

      // Show button feedback
      showButtonFeedback(message, type) {
        const feedback = document.querySelector('.button-feedback');
        if (!feedback) return;

        const messageElement = feedback.querySelector('.feedback-message');
        messageElement.textContent = message;
        messageElement.className = `feedback-message ${type}`;
        feedback.classList.remove('hidden');
      },

      // Hide button feedback
      hideButtonFeedback() {
        const feedback = document.querySelector('.button-feedback');
        if (feedback) {
          feedback.classList.add('hidden');
        }
      },

      // Handle form submission
      handleFormSubmit(event) {
        const submitBtn = document.getElementById('update-password-btn');
        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoading = submitBtn.querySelector('.btn-loading');

        // Prevent double submission
        if (this.state.formSubmitted) {
          event.preventDefault();
          return false;
        }

        // Final validation
        if (!this.isFormValid()) {
          event.preventDefault();
          this.showMessage('❌ Please fix all errors before submitting', 'error', 5000);
          return false;
        }

        // Additional security check
        if (this.state.newPassword === this.state.currentPassword) {
          event.preventDefault();
          this.showMessage('❌ New password must be different from current password', 'error', 5000);
          return false;
        }

        // Mark form as submitted
        this.state.formSubmitted = true;

        // Show loading state
        if (btnText && btnLoading) {
          btnText.classList.add('hidden');
          btnLoading.classList.remove('hidden');
        }
        submitBtn.disabled = true;

        // Clear previous messages
        this.clearAllMessages();

        // Show progress message
        this.showMessage('🔄 Updating your password securely... Please wait.', 'info');

        // Track analytics
        this.trackPasswordUpdate();

        // Let form submit naturally to Shopify
        return true;
      },

      // Track password update (for analytics)
      trackPasswordUpdate() {
        const analytics = {
          passwordStrength: this.state.passwordStrength,
          timestamp: new Date().toISOString(),
          requirementsMet: Object.values(this.state.requirements).filter(Boolean).length,
          userAgent: navigator.userAgent.substring(0, 50), // First 50 chars only for privacy
        };

        console.log('🔒 Password Update Analytics:', analytics);

        // You can send this to your analytics service here
        // Example: gtag('event', 'password_update', analytics);
      },

      // Show dynamic message
      showMessage(message, type = 'info', duration = 0) {
        const messagesContainer = document.getElementById('dynamic-messages');
        if (!messagesContainer) return;

        const messageDiv = document.createElement('div');
        messageDiv.className = `dynamic-message ${type} fade-in`;

        messageDiv.innerHTML = `
          <div style="display: flex; align-items: center; gap: 12px;">
            <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
              ${this.getMessageIcon(type)}
            </svg>
            <span>${message}</span>
            <button style="margin-left: auto; background: none; border: none; cursor: pointer; opacity: 0.7; font-size: 18px; padding: 4px;" onclick="this.parentElement.parentElement.remove()" title="Close message">
              ×
            </button>
          </div>
        `;

        messagesContainer.appendChild(messageDiv);

        // Auto-remove after duration
        if (duration > 0) {
          setTimeout(() => {
            if (messageDiv.parentNode) {
              messageDiv.classList.add('fade-out');
              setTimeout(() => messageDiv.remove(), 300);
            }
          }, duration);
        }
      },

      // Get message icon SVG
      getMessageIcon(type) {
        const icons = {
          info: '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>',
          success:
            '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>',
          warning:
            '<path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>',
          error:
            '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>',
        };
        return icons[type] || icons.info;
      },

      // Clear all dynamic messages
      clearAllMessages() {
        const messagesContainer = document.getElementById('dynamic-messages');
        if (messagesContainer) {
          messagesContainer.innerHTML = '';
        }
      },

      // Public method to manually validate form
      validateForm() {
        const currentInput = document.getElementById('current-password');
        const newInput = document.getElementById('new-password');

        if (currentInput) this.validateCurrentPassword({ target: currentInput });
        if (newInput) this.validateNewPassword({ target: newInput });

        this.validatePasswordMatch();
        this.updateSubmitButton();

        return this.isFormValid();
      },

      // Reset form state (public method)
      resetForm() {
        this.clearFormData();
        this.clearAllMessages();
        this.showMessage('✅ Form reset successfully', 'success', 2000);
      },
    };

    // Initialize the Shopify-compatible password manager
    ShopifyPasswordManager.init();

    // Make it globally accessible for debugging
    window.ShopifyPasswordManager = ShopifyPasswordManager;

    // Log successful initialization
    console.log('🚀 Shopify Password Manager ready with field names:', {
      currentPassword: 'customer[password]',
      newPassword: 'customer[new_password]',
      confirmPassword: 'customer[new_password_confirmation]',
    });
  });
</script>
