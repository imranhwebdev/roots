{% comment %}
  Dynamic Password Manager Section for Shopify Customer Account
  Note: This form updates customer information including password
{% endcomment %}

<div class="password-manager-container">
  {% form 'customer' %}
    
    <!-- Hidden fields to maintain other customer data -->
    <input type="hidden" name="form_type" value="customer">
    <input type="hidden" name="utf8" value="✓">
    <input type="hidden" name="customer[email]" value="{{ customer.email }}">
    <input type="hidden" name="customer[first_name]" value="{{ customer.first_name }}">
    <input type="hidden" name="customer[last_name]" value="{{ customer.last_name }}">
    
    <div class="grid grid-cols-2 gap-4 lg:gap-5 xl:gap-6">
      <!-- New Password -->
      <div class="col-span-2 password-field-group">
        <div class="relative z-1">
          <button
            type="button"
            class="size-5 lg:size-6 absolute z-2 top-[56%] right-5 lg:right-6 cursor-pointer toggle-password"
            aria-label="Toggle new password visibility"
            data-field="new"
          >
            <svg class="eye-open size-full" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
            <svg class="eye-closed size-full hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
            </svg>
          </button>
          
          <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">
            New Password*
          </label>
          
          <input
            id="new-password"
            placeholder="Enter New Password"
            type="password"
            name="customer[password]"
            required
            autocomplete="new-password"
            class="password-input w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg transition-all duration-300 focus:border-[#1E6C44] focus:ring-2 focus:ring-[#1E6C44] focus:ring-opacity-20"
            data-validate="new"
          >
          
          <div class="password-strength-indicator mt-2">
            <div class="flex items-center justify-between mb-1">
              <span class="text-sm text-[#797375]">Password Strength:</span>
              <span class="strength-text text-sm font-medium">Enter password</span>
            </div>
            <div class="strength-bar w-full h-2 bg-gray-200 rounded-full overflow-hidden">
              <div class="strength-fill h-full transition-all duration-300 rounded-full bg-gray-300 w-0"></div>
            </div>
          </div>
          
          <!-- Password Requirements -->
          <div class="password-requirements mt-3 text-sm">
            <p class="text-[#797375] mb-2">Password must contain:</p>
            <ul class="space-y-1">
              <li class="requirement flex items-center" data-requirement="length">
                <span class="requirement-icon w-4 h-4 mr-2 text-gray-400">●</span>
                <span class="requirement-text text-[#797375]">At least 8 characters</span>
              </li>
              <li class="requirement flex items-center" data-requirement="uppercase">
                <span class="requirement-icon w-4 h-4 mr-2 text-gray-400">●</span>
                <span class="requirement-text text-[#797375]">One uppercase letter</span>
              </li>
              <li class="requirement flex items-center" data-requirement="lowercase">
                <span class="requirement-icon w-4 h-4 mr-2 text-gray-400">●</span>
                <span class="requirement-text text-[#797375]">One lowercase letter</span>
              </li>
              <li class="requirement flex items-center" data-requirement="number">
                <span class="requirement-icon w-4 h-4 mr-2 text-gray-400">●</span>
                <span class="requirement-text text-[#797375]">One number</span>
              </li>
              <li class="requirement flex items-center" data-requirement="special">
                <span class="requirement-icon w-4 h-4 mr-2 text-gray-400">●</span>
                <span class="requirement-text text-[#797375]">One special character (!@#$%^&*)</span>
              </li>
            </ul>
          </div>
        </div>
      </div>

      <!-- Confirm New Password -->
      <div class="col-span-2 password-field-group">
        <div class="relative z-1">
          <button
            type="button"
            class="size-5 lg:size-6 absolute z-2 top-[56%] right-5 lg:right-6 cursor-pointer toggle-password"
            aria-label="Toggle confirm password visibility"
            data-field="confirm"
          >
            <svg class="eye-open size-full" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
            <svg class="eye-closed size-full hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
            </svg>
          </button>
          
          <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">
            Confirm New Password*
          </label>
          
          <input
            id="confirm-password"
            placeholder="Confirm New Password"
            type="password"
            name="customer[password_confirmation]"
            required
            autocomplete="new-password"
            class="password-input w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg transition-all duration-300 focus:border-[#1E6C44] focus:ring-2 focus:ring-[#1E6C44] focus:ring-opacity-20"
            data-validate="confirm"
          >
          
          <div class="password-match-indicator mt-2 hidden">
            <div class="flex items-center">
              <span class="match-icon w-4 h-4 mr-2"></span>
              <span class="match-text text-sm"></span>
            </div>
          </div>
        </div>
      </div>

      <!-- Current Password for Verification -->
      <div class="col-span-2 password-field-group">
        <div class="relative z-1">
          <button
            type="button"
            class="size-5 lg:size-6 absolute z-2 top-[56%] right-5 lg:right-6 cursor-pointer toggle-password"
            aria-label="Toggle current password visibility"
            data-field="current"
          >
            <svg class="eye-open size-full" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
            <svg class="eye-closed size-full hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
            </svg>
          </button>
          
          <label class="block text-[#514849] text-lg lg:text-[22px] mb-2 font-medium !leading-[1.25]">
            Current Password (for verification)*
          </label>
          
          <input
            id="current-password"
            placeholder="Enter Current Password"
            type="password"
            name="customer[current_password]"
            required
            autocomplete="current-password"
            class="password-input w-full text-lg lg:text-xl !leading-[1.2] text-[#797375] placeholder:text-[#797375] border lg:border-[1.2px] border-[#E3E2E0] bg-[#FCFBF7] py-4 lg:py-5 px-5 lg:px-6 rounded-lg transition-all duration-300 focus:border-[#1E6C44] focus:ring-2 focus:ring-[#1E6C44] focus:ring-opacity-20"
            data-validate="current"
          >
        </div>
        
        <a
          href="{{ routes.account_recover_url | default: '/account/recover' }}"
          class="forgot-password-link block mt-3 ml-auto text-base lg:text-lg text-[#1E6C44] text-end !leading-[1.2] !underline hover:text-[#145a35] transition-colors duration-200"
        >
          Forgot Password?
        </a>
      </div>

      <!-- Submit Button -->
      <div class="col-span-2">
        <button 
          type="submit" 
          class="btn submit-btn !py-4 lg:!py-5 !px-7 lg:!px-8 w-full lg:w-auto transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
          id="update-password-btn"
          disabled
        >
          <span class="btn-text">Update Password</span>
          <span class="btn-loading hidden">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Updating...
          </span>
        </button>
      </div>

      <!-- Messages Container -->
      <div class="col-span-2 messages-container">
        <!-- Error Messages -->
        {% if form.errors %}
          <div class="error-messages bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mt-4">
            <div class="flex items-center mb-2">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
              </svg>
              <strong>Error updating password:</strong>
            </div>
            {% for field in form.errors %}
              {% for message in form.errors[field] %}
                <p class="text-sm">{{ message }}</p>
              {% endfor %}
            {% endfor %}
          </div>
        {% endif %}

        <!-- Success Message -->
        {% if form.posted_successfully? %}
          <div class="success-message bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mt-4">
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
              </svg>
              <strong>Password updated successfully!</strong>
            </div>
          </div>
        {% endif %}

        <!-- Dynamic Messages Container -->
        <div id="dynamic-messages" class="mt-4"></div>
      </div>
    </div>
  {% endform %}
</div>

<style>
/* Custom styles for enhanced functionality */
.password-manager-container .requirement.met .requirement-icon {
  color: #10b981;
}

.password-manager-container .requirement.met .requirement-text {
  color: #059669;
}

.password-manager-container .requirement.met .requirement-icon::before {
  content: "✓";
  font-weight: bold;
}

.password-manager-container .strength-fill.weak {
  background-color: #ef4444;
  width: 25%;
}

.password-manager-container .strength-fill.fair {
  background-color: #f59e0b;
  width: 50%;
}

.password-manager-container .strength-fill.good {
  background-color: #3b82f6;
  width: 75%;
}

.password-manager-container .strength-fill.strong {
  background-color: #10b981;
  width: 100%;
}

.password-manager-container .match-icon.success::before {
  content: "✓";
  color: #10b981;
  font-weight: bold;
}

.password-manager-container .match-icon.error::before {
  content: "✗";
  color: #ef4444;
  font-weight: bold;
}

.password-manager-container .password-input.invalid {
  border-color: #ef4444;
  background-color: #fef2f2;
}

.password-manager-container .password-input.valid {
  border-color: #10b981;
  background-color: #f0fdf4;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const passwordManager = {
    // Initialize the password manager
    init() {
      this.bindEvents();
      this.validateForm();
    },

    // Bind all event listeners
    bindEvents() {
      // Toggle password visibility
      document.querySelectorAll('.toggle-password').forEach(button => {
        button.addEventListener('click', this.togglePasswordVisibility.bind(this));
      });

      // Password validation
      document.getElementById('new-password').addEventListener('input', this.validateNewPassword.bind(this));
      document.getElementById('confirm-password').addEventListener('input', this.validatePasswordMatch.bind(this));
      document.getElementById('current-password').addEventListener('input', this.validateForm.bind(this));

      // Form submission
      const form = document.querySelector('.password-manager-container form');
      if (form) {
        form.addEventListener('submit', this.handleFormSubmit.bind(this));
      }

      // Real-time form validation
      document.querySelectorAll('.password-input').forEach(input => {
        input.addEventListener('blur', this.validateField.bind(this));
        input.addEventListener('input', this.clearFieldError.bind(this));
      });
    },

    // Toggle password visibility
    togglePasswordVisibility(event) {
      const button = event.currentTarget;
      const container = button.closest('.relative');
      const input = container.querySelector('input');
      const eyeOpen = button.querySelector('.eye-open');
      const eyeClosed = button.querySelector('.eye-closed');

      if (input.type === 'password') {
        input.type = 'text';
        eyeOpen.classList.add('hidden');
        eyeClosed.classList.remove('hidden');
      } else {
        input.type = 'password';
        eyeOpen.classList.remove('hidden');
        eyeClosed.classList.add('hidden');
      }
    },

    // Validate new password strength
    validateNewPassword(event) {
      const password = event.target.value;
      const container = event.target.closest('.password-field-group');
      const strengthIndicator = container.querySelector('.password-strength-indicator');
      const strengthFill = strengthIndicator.querySelector('.strength-fill');
      const strengthText = strengthIndicator.querySelector('.strength-text');
      const requirements = container.querySelectorAll('.requirement');

      // Check requirements
      const checks = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /\d/.test(password),
        special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
      };

      // Update requirement indicators
      requirements.forEach(req => {
        const requirement = req.getAttribute('data-requirement');
        if (checks[requirement]) {
          req.classList.add('met');
        } else {
          req.classList.remove('met');
        }
      });

      // Calculate strength
      const metRequirements = Object.values(checks).filter(Boolean).length;
      let strength = 'weak';
      let strengthLabel = 'Weak';

      if (metRequirements >= 5) {
        strength = 'strong';
        strengthLabel = 'Strong';
      } else if (metRequirements >= 3) {
        strength = 'good';
        strengthLabel = 'Good';
      } else if (metRequirements >= 2) {
        strength = 'fair';
        strengthLabel = 'Fair';
      }

      // Update strength indicator
      strengthFill.className = `strength-fill h-full transition-all duration-300 rounded-full ${strength}`;
      strengthText.textContent = password ? strengthLabel : 'Enter password';

      // Validate form
      this.validateForm();
      this.validatePasswordMatch();
    },

    // Validate password match
    validatePasswordMatch(event) {
      const newPassword = document.getElementById('new-password').value;
      const confirmPassword = document.getElementById('confirm-password').value;
      const container = document.getElementById('confirm-password').closest('.password-field-group');
      const matchIndicator = container.querySelector('.password-match-indicator');
      const matchIcon = matchIndicator.querySelector('.match-icon');
      const matchText = matchIndicator.querySelector('.match-text');

      if (confirmPassword) {
        matchIndicator.classList.remove('hidden');
        
        if (newPassword === confirmPassword) {
          matchIcon.className = 'match-icon w-4 h-4 mr-2 success';
          matchText.textContent = 'Passwords match';
          matchText.className = 'match-text text-sm text-green-600';
        } else {
          matchIcon.className = 'match-icon w-4 h-4 mr-2 error';
          matchText.textContent = 'Passwords do not match';
          matchText.className = 'match-text text-sm text-red-600';
        }
      } else {
        matchIndicator.classList.add('hidden');
      }

      this.validateForm();
    },

    // Validate individual field
    validateField(event) {
      const input = event.target;
      const value = input.value.trim();

      if (!value) {
        input.classList.add('invalid');
        input.classList.remove('valid');
        this.showFieldError(input, 'This field is required');
      } else {
        input.classList.remove('invalid');
        input.classList.add('valid');
        this.clearFieldError(input);
      }
    },

    // Clear field error
    clearFieldError(event) {
      const input = event.target;
      input.classList.remove('invalid');
      
      // Remove any existing error message
      const existingError = input.parentNode.querySelector('.field-error');
      if (existingError) {
        existingError.remove();
      }
    },

    // Show field error
    showFieldError(input, message) {
      // Remove existing error
      const existingError = input.parentNode.querySelector('.field-error');
      if (existingError) {
        existingError.remove();
      }

      // Add new error
      const errorDiv = document.createElement('div');
      errorDiv.className = 'field-error text-red-600 text-sm mt-1';
      errorDiv.textContent = message;
      input.parentNode.appendChild(errorDiv);
    },

    // Validate entire form
    validateForm() {
      const currentPassword = document.getElementById('current-password').value;
      const newPassword = document.getElementById('new-password').value;
      const confirmPassword = document.getElementById('confirm-password').value;
      const submitBtn = document.getElementById('update-password-btn');

      // Check if all fields are filled
      const allFieldsFilled = currentPassword && newPassword && confirmPassword;
      
      // Check if passwords match
      const passwordsMatch = newPassword === confirmPassword;
      
      // Check if new password meets requirements
      const passwordStrong = this.isPasswordStrong(newPassword);

      // Enable/disable submit button
      if (allFieldsFilled && passwordsMatch && passwordStrong) {
        submitBtn.disabled = false;
        submitBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      } else {
        submitBtn.disabled = true;
        submitBtn.classList.add('opacity-50', 'cursor-not-allowed');
      }
    },

    // Check if password meets strength requirements
    isPasswordStrong(password) {
      const checks = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /\d/.test(password),
        special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
      };

      return Object.values(checks).filter(Boolean).length >= 4;
    },

    // Handle form submission
    handleFormSubmit(event) {
      const submitBtn = document.getElementById('update-password-btn');
      const btnText = submitBtn.querySelector('.btn-text');
      const btnLoading = submitBtn.querySelector('.btn-loading');

      // Show loading state
      btnText.classList.add('hidden');
      btnLoading.classList.remove('hidden');
      submitBtn.disabled = true;

      // Clear previous messages
      const messagesContainer = document.getElementById('dynamic-messages');
      messagesContainer.innerHTML = '';

      // Note: The actual form submission is handled by Shopify
      // This is just for UI feedback
    },

    // Show dynamic message
    showMessage(message, type = 'info') {
      const messagesContainer = document.getElementById('dynamic-messages');
      
      const messageDiv = document.createElement('div');
      messageDiv.className = `dynamic-message bg-${type === 'error' ? 'red' : type === 'success' ? 'green' : 'blue'}-50 border border-${type === 'error' ? 'red' : type === 'success' ? 'green' : 'blue'}-200 text-${type === 'error' ? 'red' : type === 'success' ? 'green' : 'blue'}-700 px-4 py-3 rounded-lg`;
      
      messageDiv.innerHTML = `
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            ${type === 'success' ? 
              '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>' :
              '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>'
            }
          </svg>
          <span>${message}</span>
          <button class="ml-auto text-current hover:opacity-75" onclick="this.parentElement.parentElement.remove()">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
          </button>
        </div>
      `;
      
      messagesContainer.appendChild(messageDiv);

      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (messageDiv.parentNode) {
          messageDiv.remove();
        }
      }, 5000);
    }
  };

  // Initialize password manager
  passwordManager.init();

  // Make it globally accessible for debugging
  window.passwordManager = passwordManager;
});
</script>